# Update am 22.01.2013, 05.02.2013
# In diesem Skript moechte ich alle interesannte Pakete auflisten und kurz beschreiben
#------------------------#
# Grundsaetzliche Dinge
#------------------------#
# Paket um Daten einzulesen
install.packages("foreign")
# Mit diesem Paket kann man noch unfertige Projekte von github installieren
install.packages("devtools")
install.packages("source.gist")
library(devtools)
install_github("rfigshare", "ropensci")
# Pakete kÃ¶nnen auch erneuert werden
update.packages("Cairo")
install.packages("reshape2")
#------------------------#
# Lehren mit R
#------------------------#
install.packages("fBasics")
install.packages("TeachingSampling")
install.packages("datasets")
install.packages("faraway")
install.packages("LearnBayes")
install.packages("TeachingDemos")
#------------------------#
# Graphikpakete
#------------------------#
install.packages("lattice")
install.packages("ggplot2")
install.packages("vcd")        # Visualisierung von kategorialen Daten
install.packages("rggobi")
install.packages("beeswarm")   # Weitere Alternative zu Boxplots
install.packages("plotrix")   # Various plotting functions
install.packages("vioplot")
install_github('arcdiagram', username='gastonstat')
install.packages("corrgram")
install.packages("PerformanceAnalytics")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("faraway")
install.packages("LearnBayes")
install.packages("TeachingDemos")
install.packages("lattice")
install.packages("ggplot2")
install.packages("vcd")        # Visualisierung von kategorialen Daten
install.packages("rggobi")
install.packages("beeswarm")   # Weitere Alternative zu Boxplots
install.packages("plotrix")   # Various plotting functions
install.packages("vioplot")
install_github('arcdiagram', username='gastonstat')
library(devtools)
install_github('arcdiagram', username='gastonstat')
install.packages("corrgram")
install.packages("PerformanceAnalytics")
install.packages("beanplot")
install.packages("ggparallel")
install.packages("aplpack")
install.packages("gplots")
#------------------------#
# Reproduzierbare Forschungsergebnisse
#------------------------#
install.packages("knitr")
install.packages("knitcitations")
install.packages("bibtex")
# Tabellen in LaTeX erstellen:
install.packages("stargazer")
install.packages("xtable")
install.packages("apsrtable")
#------------------------#
# Pakete fuer Geographie
#------------------------#
install.packages("sp")
install.packages("ggmap")
install.packages("spdep")
install.packages("maptools")
install.packages("rworldmap")
install.packages("rgeos")                 # Interface to Geometry Engine
install.packages("rasterVis")
install.packages("spacetime")
install.packages("PBSmapping")
install.packages("PBSmodelling")
install.packages("GEOmap")
install.packages("geomapdata")
install.packages("geosphere")
install.packages("GeoXp")
install.packages("spcosa")
install.packages("spatstat")
install.packages("geonames")
install.packages("RgoogleMaps")
install.packages("OpenStreetMap")
install.packages("osmar")
install.packages("RPyGeo")
install.packages("MarkedPointProcess")
install.packages("spatgraphs")
install.packages("DCluster")   # spatial clusters of diseases
# R als GIS nutzen
install.packages("gdistance")
install.packages("googleVis")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("geoPlot")
install.packages("SoDA")
install.packages("proj4")
install.packages("geocodeHERE")
install.packages("geonames")
install.packages("RDSTK")
install.packages("spgrass6")
install.packages("RSAGA")
install.packages("RArcInfo")
install.packages("geoR")
install.packages("fields")
install.packages("mapdata")
install.packages("gpclib")
install.packages("micromap")
install.packages("micromapST")
install.packages("SmarterPoland")
#------------------------#
# Datenquellen (geographisch)
#------------------------#
install.packages("rWBclimate")
install.packages("rgbif")
install.packages("oce")
install.packages("Quandl") # https://www.quandl.com/help/r
#------------------------#
# Pakete fuer Stichproben Schaetzung etc
#------------------------#
install.packages("survey")
install.packages("sampling")
install.packages("samplingVarEst")
install.packages("VGAM")
install.packages("fmsb") # beispielsweise um Nagelkerke zu berechnen
# Hierarchische Modelle, und Multilevel Modelle
install.packages("lme4")
install.packages("nlme")
install.packages("arm")
install.packages("hglm")   # Hierarchical Generalized Linear Models
install.packages("influence.ME")   # Tools for detecting influential data in mixed effects models
install.packages("MEMSS")
# Raking
install.packages("rake")  # Paket fÃ¼r das Raking
install.packages("anesrake")  # Paket fÃ¼r das Raking
install.packages("RankAggreg") # ebenfalls Raking
# Paket zur Berechnung von Cohen's D:
install.packages("compute.es")
install.packages("lsr")
#------------------------#
# Regression etc.
#------------------------#
install.packages("Zelig")
install.packages("phia")
install.packages("dummies")
install.packages("gmodels") # GREG mit binÃ¤ren Daten
#------------------------#
# Imputation
#------------------------#
install.packages("Amelia")
#------------------------#
# Das Internet mit R nutzen
#------------------------#
# Pakete fuer Dinge mit Internet
install.packages("rjson")
install.packages("googleVis")
install.packages("plotKML")
install.packages("lubridate")
install.packages("rplos")   #Interface to PLoS Journals API methods
install.packages("LaF")   # Fast access to large ASCII files
install.packages("rdryad")  # Dryad API interface
install.packages("RXKCD")   # Get XKCD comic from R
install.packages("rgbif") # A programmatic interface to the Web Service methods
install.packages("Rfacebook")
# Eine wordcloud mit R erstellen
install.packages("wordcloud")
install.packages("tm")    # Text Mining Package
#------------------------#
# Panel-Daten
#------------------------#
install.packages("plm")
#------------------------#
# Strukturgleichungsmodelle
#------------------------#
install.packages("semGOF")
install.packages("sem")
# install.packages("OpenMx")
# Netzwerkanalyse
install.packages("igraph")
install.packages("Statnet")
#------------------------#
# Psychologische Diagnostik
#------------------------#
install.packages("eRm")      # extended Rasch modeling
install.packages("pwr")
#------------------------#
# Optimierungsalgorithmen
#------------------------#
install.packages("DEoptim")
install.packages("GenSA")
install.packages("optimx")
install.packages("subselect")
#------------------------#
# Pakete fÃ¼r Verteilungen
#------------------------#
install.packages("timeDate")
install.packages("lmomco")
install.packages("modeest")
#------------------------#
# Screen Scraping
#------------------------#
install.packages("RSXML")
install.packages("scrapeR") # Paket fÃ¼r Web Scraping
install.packages("RGoogleAnalytics")
install.packages("rga")
#------------------------#
# Datenbanken
#------------------------#
install.packages("RPostgreSQL")
install.packages("RMySQL")
install.packages("RSQLite")
install.packages("RNetCDF")
install.packages("DBI")
install.packages("RJDBC")
#------------------------#
# Sonstige interessante Pakete
#------------------------#
install.packages("bindata")
install.packages("simba")
install.packages("proxy")
install.packages("gregmisc")
# Kombinatorik
install.packages("combinat")
install.packages("animation")
install.packages("plyr")
install.packages("reshape")
# Jobs verteilen
install.packages("Rmpi")
install.packages("SNOW")
install.packages("nws")
#------------------------#
# Schnittstellen zu anderen Programmen
#------------------------#
install.packages("jsonlite")
# rJava einladen
install.packages("rJava")
# http://www.rforge.net/JRI/
install.packages("JRI")
options(rpubs.upload.method = "internal")
?base:lm
?base::lm
library(wordcloud)
library(tm)
Befehle <- c("lookup.xport","read.arff","read.dbf",
"read.dta","read.epiinfo","read.mtp",
"read.octave","read.spss","read.ssd",
"read.systat","read.xport","write.arff",
"write.dbf","write.dta","write.foreign")
p <- sample(1:5,length(Befehle),replace=T)
p[Befehle=="read.spss"] <- 15
p[Befehle=="read.dta"] <- 12
p[Befehle=="write.dta"] <- 10
p[Befehle=="write.foreign"] <- 8
pal <- brewer.pal(6,"Dark2")
wordcloud(Befehle,p,colors=pal)
b <- c(1,2)
length(b)
# Das Maximum:
max(b)
# Minimum
min(b)
# Standardabweichung
sd(b)
# Varianz
var(b)
# Mittelwert
mean(b)
# Median
median(b)
# Das Ergebnis kann wieder einem Objekt zugewiesen werden
med_b <- median(b)
d <- c(1,4,3,7,9,5,4,3)
# Quantil berechnen:
quantile(d,0.9)
# hier werden 2 Elemente aus d gezogen
sample(x=d,size=2,replace=FALSE)
# jedes Mal können andere Ergebnisse resultieren
# hier wird nur ein Element gezogen
sample(x=d,size=1,replace=FALSE)
# auch dieses Ergebnis kann wieder in einem Element
# gespeichert werden
stichA <- sample(x=d,size=1,replace=FALSE)
```
A <- c(5,4,3)
is.numeric(A)
str(A)
B <- c(T,F,T,T)
is.logical(B)
str(B)
C <- c("AB","F","23")
is.logical(C)
str(C)
D <- c(1,3,"A")
str(D)
b <- c(1,2)
log <- c(T,F)
char <- c("A","b")
fac <- as.factor(c(1,2))
# mit as... kann man also umwandeln
as.character(b)
# wenn man das nicht in Objekt speichert
# merkt es es sich R auch nicht
b
b <- c(1,2) # numeric
log <- c(T,F) # logical
char <-c("A","b") # character
fac <- as.factor(c(1,2)) # factor
library(maptools)
data(wrld_simpl)
table(wrld_simpl$REGION)
Europe <- wrld_simpl[wrld_simpl$REGION=="150",]
plot(Europe,col="royalblue")
wrld_simpl$NAME
sort(wrld_simpl$NAME)
plot(threeStates)
threeStates <- wrld_simpl[wrld_simpl$NAME%in%c("Germany","Poland","Denmark"),]
plot(threeStates)
plot(threeStates,col="chocolate1")
library(maptools)
data(wrld_simpl)
head(wrld_simpl@data)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(ggplot2)
qplot(data=diamonds,x=cut,y=depth,color=carat)
head(diamonds)
myGG<-qplot(data=diamonds,x=carat,y=depth,color=carat)
qplot(data=diamonds,x=carat,y=depth,color=carat)
myGG + stat_smooth(method="lm")
ggsave("Graphik.jpg")
library(knitr)
?kable
kable(head(iris), format = "latex")
kable(head(iris), format = "html")
head(world.cities)
kable(head(iris), format = "html")
data(world.cities)
data(world.cities)
library(maps)
map.cities(world.cities)
?world.cities
map.cities(world.cities)
dev.off()
map("world", "China")
map.cities(country = "China", capitals = 2)
map.cities(country = "China", capitals = 2)
data(us.cities)
data(us.cities)
map("world", "Germany")
map.cities(country = "Germany")
?map.cities
map.cities(country = "Germany",capitals=3)
map("world", "Germany")
map.cities(country = "Germany",capitals=3)
map.cities(country = "Germany",capitals=2)
map.cities(country = "Germany",capitals=1)
world.cities
data(world.cities)
head(world.cities)
?par
map("world", "Germany")
map.cities(country = "Germany",pch=20)
map.cities(country = "Germany",pch=20,col="red")
library(maptools)
data(wrld_simpl)
plot(wrld_simpl)
my_map@data$color <- c("blue","green")
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
EuropeList <- c('Germany', 'France')
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
plot(my_map)
my_map@data$color <- c("blue","green")
plot(my_map,col=my_map@data$color)
library(sp)
library(maptools)
data("wrld_simpl")
ind <- wrld_simpl@data$ISO2%in%c("FR","DE")
my_map <- wrld_simpl[ind,]
plot(my_map)
ind <- wrld_simpl@data$ISO2%in%c("FR","DE","AT","CH")
my_map <- wrld_simpl[ind,]
plot(my_map)
library(knitr)
my_map@data
git.path <- "C:/Users/kolbjp/Documents/GitHub/GeoData"
setwd(git.path)
library(mapdata)
?map
data(worldHiresMapEnv)
map('worldHires', col=1:10)
library(mapdata)
data(worldHiresMapEnv)
map('worldHires', col=1:10)
head(worldHiresMapEnv)
library(googleVis)
df
df[,1:5]
df$LATITUDE
?gvisMap
M1 <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
plot(M1)
head(Andrew)
library(osmar)
cityC <- geocode("Berlin")
bb <- center_bbox(cityC$lon,cityC$lat,1200, 1200)
library(maptools)
cityC <- geocode("Berlin")
library(ggmap)
cityC <- geocode("Berlin")
bb <- center_bbox(cityC$lon,cityC$lat,1200, 1200)
ua <- get_osm(bb, source = api)
api <- osmsource_api()
ua <- get_osm(bb, source = api)
plotbui <- function(ua){
ua_ids <- find(ua, way(tags(k == "building")))
ua_ids2 <- find_down(ua, way(ua_ids))
bg <- subset(ua, ids = ua_ids2)
bg_erg <- as_sp(bg, "polygons")
return(bg_erg)
}
setwd("C:/Users/kolbjp/Documents/GitHub/GeoData")
