install.packages("bibtex")
# Tabellen in LaTeX erstellen:
install.packages("stargazer")
install.packages("xtable")
install.packages("apsrtable")
#------------------------#
# Pakete fuer Geographie
#------------------------#
install.packages("sp")
install.packages("ggmap")
install.packages("spdep")
install.packages("maptools")
install.packages("rworldmap")
install.packages("rgeos")                 # Interface to Geometry Engine
install.packages("rasterVis")
install.packages("spacetime")
install.packages("PBSmapping")
install.packages("PBSmodelling")
install.packages("GEOmap")
install.packages("geomapdata")
install.packages("geosphere")
install.packages("GeoXp")
install.packages("spcosa")
install.packages("spatstat")
install.packages("geonames")
install.packages("RgoogleMaps")
install.packages("OpenStreetMap")
install.packages("osmar")
install.packages("RPyGeo")
install.packages("MarkedPointProcess")
install.packages("spatgraphs")
install.packages("DCluster")   # spatial clusters of diseases
# R als GIS nutzen
install.packages("gdistance")
install.packages("googleVis")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("geoPlot")
install.packages("SoDA")
install.packages("proj4")
install.packages("geocodeHERE")
install.packages("geonames")
install.packages("RDSTK")
install.packages("spgrass6")
install.packages("RSAGA")
install.packages("RArcInfo")
install.packages("geoR")
install.packages("fields")
install.packages("mapdata")
install.packages("gpclib")
install.packages("micromap")
install.packages("micromapST")
install.packages("SmarterPoland")
#------------------------#
# Datenquellen (geographisch)
#------------------------#
install.packages("rWBclimate")
install.packages("rgbif")
install.packages("oce")
install.packages("Quandl") # https://www.quandl.com/help/r
#------------------------#
# Pakete fuer Stichproben Schaetzung etc
#------------------------#
install.packages("survey")
install.packages("sampling")
install.packages("samplingVarEst")
install.packages("VGAM")
install.packages("fmsb") # beispielsweise um Nagelkerke zu berechnen
# Hierarchische Modelle, und Multilevel Modelle
install.packages("lme4")
install.packages("nlme")
install.packages("arm")
install.packages("hglm")   # Hierarchical Generalized Linear Models
install.packages("influence.ME")   # Tools for detecting influential data in mixed effects models
install.packages("MEMSS")
# Raking
install.packages("rake")  # Paket fÃ¼r das Raking
install.packages("anesrake")  # Paket fÃ¼r das Raking
install.packages("RankAggreg") # ebenfalls Raking
# Paket zur Berechnung von Cohen's D:
install.packages("compute.es")
install.packages("lsr")
#------------------------#
# Regression etc.
#------------------------#
install.packages("Zelig")
install.packages("phia")
install.packages("dummies")
install.packages("gmodels") # GREG mit binÃ¤ren Daten
#------------------------#
# Imputation
#------------------------#
install.packages("Amelia")
#------------------------#
# Das Internet mit R nutzen
#------------------------#
# Pakete fuer Dinge mit Internet
install.packages("rjson")
install.packages("googleVis")
install.packages("plotKML")
install.packages("lubridate")
install.packages("rplos")   #Interface to PLoS Journals API methods
install.packages("LaF")   # Fast access to large ASCII files
install.packages("rdryad")  # Dryad API interface
install.packages("RXKCD")   # Get XKCD comic from R
install.packages("rgbif") # A programmatic interface to the Web Service methods
install.packages("Rfacebook")
# Eine wordcloud mit R erstellen
install.packages("wordcloud")
install.packages("tm")    # Text Mining Package
#------------------------#
# Panel-Daten
#------------------------#
install.packages("plm")
#------------------------#
# Strukturgleichungsmodelle
#------------------------#
install.packages("semGOF")
install.packages("sem")
# install.packages("OpenMx")
# Netzwerkanalyse
install.packages("igraph")
install.packages("Statnet")
#------------------------#
# Psychologische Diagnostik
#------------------------#
install.packages("eRm")      # extended Rasch modeling
install.packages("pwr")
#------------------------#
# Optimierungsalgorithmen
#------------------------#
install.packages("DEoptim")
install.packages("GenSA")
install.packages("optimx")
install.packages("subselect")
#------------------------#
# Pakete fÃ¼r Verteilungen
#------------------------#
install.packages("timeDate")
install.packages("lmomco")
install.packages("modeest")
#------------------------#
# Screen Scraping
#------------------------#
install.packages("RSXML")
install.packages("scrapeR") # Paket fÃ¼r Web Scraping
install.packages("RGoogleAnalytics")
install.packages("rga")
#------------------------#
# Datenbanken
#------------------------#
install.packages("RPostgreSQL")
install.packages("RMySQL")
install.packages("RSQLite")
install.packages("RNetCDF")
install.packages("DBI")
install.packages("RJDBC")
#------------------------#
# Sonstige interessante Pakete
#------------------------#
install.packages("bindata")
install.packages("simba")
install.packages("proxy")
install.packages("gregmisc")
# Kombinatorik
install.packages("combinat")
install.packages("animation")
install.packages("plyr")
install.packages("reshape")
# Jobs verteilen
install.packages("Rmpi")
install.packages("SNOW")
install.packages("nws")
#------------------------#
# Schnittstellen zu anderen Programmen
#------------------------#
install.packages("jsonlite")
# rJava einladen
install.packages("rJava")
# http://www.rforge.net/JRI/
install.packages("JRI")
options(rpubs.upload.method = "internal")
?base:lm
?base::lm
library(wordcloud)
library(tm)
Befehle <- c("lookup.xport","read.arff","read.dbf",
"read.dta","read.epiinfo","read.mtp",
"read.octave","read.spss","read.ssd",
"read.systat","read.xport","write.arff",
"write.dbf","write.dta","write.foreign")
p <- sample(1:5,length(Befehle),replace=T)
p[Befehle=="read.spss"] <- 15
p[Befehle=="read.dta"] <- 12
p[Befehle=="write.dta"] <- 10
p[Befehle=="write.foreign"] <- 8
pal <- brewer.pal(6,"Dark2")
wordcloud(Befehle,p,colors=pal)
b <- c(1,2)
length(b)
# Das Maximum:
max(b)
# Minimum
min(b)
# Standardabweichung
sd(b)
# Varianz
var(b)
# Mittelwert
mean(b)
# Median
median(b)
# Das Ergebnis kann wieder einem Objekt zugewiesen werden
med_b <- median(b)
d <- c(1,4,3,7,9,5,4,3)
# Quantil berechnen:
quantile(d,0.9)
# hier werden 2 Elemente aus d gezogen
sample(x=d,size=2,replace=FALSE)
# jedes Mal können andere Ergebnisse resultieren
# hier wird nur ein Element gezogen
sample(x=d,size=1,replace=FALSE)
# auch dieses Ergebnis kann wieder in einem Element
# gespeichert werden
stichA <- sample(x=d,size=1,replace=FALSE)
```
A <- c(5,4,3)
is.numeric(A)
str(A)
B <- c(T,F,T,T)
is.logical(B)
str(B)
C <- c("AB","F","23")
is.logical(C)
str(C)
D <- c(1,3,"A")
str(D)
b <- c(1,2)
log <- c(T,F)
char <- c("A","b")
fac <- as.factor(c(1,2))
# mit as... kann man also umwandeln
as.character(b)
# wenn man das nicht in Objekt speichert
# merkt es es sich R auch nicht
b
b <- c(1,2) # numeric
log <- c(T,F) # logical
char <-c("A","b") # character
fac <- as.factor(c(1,2)) # factor
library(maptools)
data(wrld_simpl)
table(wrld_simpl$REGION)
Europe <- wrld_simpl[wrld_simpl$REGION=="150",]
plot(Europe,col="royalblue")
wrld_simpl$NAME
sort(wrld_simpl$NAME)
plot(threeStates)
threeStates <- wrld_simpl[wrld_simpl$NAME%in%c("Germany","Poland","Denmark"),]
plot(threeStates)
plot(threeStates,col="chocolate1")
library(maptools)
data(wrld_simpl)
head(wrld_simpl@data)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(ggplot2)
qplot(data=diamonds,x=cut,y=depth,color=carat)
head(diamonds)
myGG<-qplot(data=diamonds,x=carat,y=depth,color=carat)
qplot(data=diamonds,x=carat,y=depth,color=carat)
myGG + stat_smooth(method="lm")
ggsave("Graphik.jpg")
library(knitr)
?kable
kable(head(iris), format = "latex")
kable(head(iris), format = "html")
head(world.cities)
kable(head(iris), format = "html")
data(world.cities)
data(world.cities)
library(maps)
map.cities(world.cities)
?world.cities
map.cities(world.cities)
dev.off()
map("world", "China")
map.cities(country = "China", capitals = 2)
map.cities(country = "China", capitals = 2)
data(us.cities)
data(us.cities)
map("world", "Germany")
map.cities(country = "Germany")
?map.cities
map.cities(country = "Germany",capitals=3)
map("world", "Germany")
map.cities(country = "Germany",capitals=3)
map.cities(country = "Germany",capitals=2)
map.cities(country = "Germany",capitals=1)
world.cities
data(world.cities)
head(world.cities)
?par
map("world", "Germany")
map.cities(country = "Germany",pch=20)
map.cities(country = "Germany",pch=20,col="red")
library(maptools)
data(wrld_simpl)
plot(wrld_simpl)
my_map@data$color <- c("blue","green")
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
EuropeList <- c('Germany', 'France')
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
plot(my_map)
my_map@data$color <- c("blue","green")
plot(my_map,col=my_map@data$color)
library(sp)
library(maptools)
data("wrld_simpl")
ind <- wrld_simpl@data$ISO2%in%c("FR","DE")
my_map <- wrld_simpl[ind,]
plot(my_map)
ind <- wrld_simpl@data$ISO2%in%c("FR","DE","AT","CH")
my_map <- wrld_simpl[ind,]
plot(my_map)
library(knitr)
my_map@data
library(XML)
ab <- xmlParse("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=-77.041579,38.885851,-77.007247,38.900881%5D")
ab
bbox <- "-77.041579,38.885851,-77.007247,38.900881"
abc <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox,"%5D",sep=""))
abc
library(ggmap)
MAcode <- geocode("Mannheim")
MAcode
MAcode1 <- geocode("Mannheim Sandhofen")
MAcode2 <- geocode("Mannheim Rheinau")
MAcode4 <- geocode("IKEA Sandhofen")
MAcode4
MAcode4 <- geocode("IKEA Mannheim Sandhofen")
MAcode4
MAcode1 <- geocode("Mannheim Sandhofen")
MAcode2 <- geocode("Mannheim Rheinau")
MAcode1
MAcode2
geocode("Dresden")
geocode("Muenchen")
bbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat)
MAcode3 <- geocode("Mannheim Schloss")
bbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat)
bbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat,sep=",")
bbox2
bbox
abcd <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox2,"%5D",sep=""))
abce <- xmlParse("http://open.mapquestapi.com/xapi/api/0.6/node[amenity=pub][bbox=8.41420088819042,49.467729452325514,8.551529989747436,49.517905125443455]")
abce
nrow(abce)
length(abce)
MAcode3$lon
MAcode4$lon
8.41420088819042
8.551529989747436
MAcode1 <- geocode("Mannheim Wallstadt")
MAcode1
bbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat,sep=",")
abcd <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox2,"%5D",sep=""))
MAcode3$lon
MAcode4$lon
MAcode4 <- geocode("IKEA Wallstadt")
MAcode4 <- geocode("Mannheim Wallstadt")
bbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat,sep=",")
abcd <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox2,"%5D",sep=""))
MAcode2$lat
MAcode1$lat
MAcode4$lon
MAcode3$lon
MAcode2$lat
MAcode1$lat
paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox2,"%5D",sep="")
abcd <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox2,"%5D",sep=""))
abcd
setwd(path)
path <- "C:\Users\kolbjp\Documents\GitHub\GeoData\workshops"
setwd(path)
setwd(path)
path <- "C:/Users/kolbjp/Documents/GitHub/GeoData/workshops"
setwd(path)
library(raster)
install.packages(raster)
install.packages("raster")
?getData
library(raster)
?getData
LUX <- getData('GADM', country='LUX', level=1)
plot(LUX)
LUX <- getData('GADM', country='LUX', level=2)
plot(LUX)
LUX2 <- LUX
LUX3 <- getData('GADM', country='LUX', level=3)
plot(LUX3)
LUX4 <- getData('GADM', country='LUX', level=4)
LUX5 <- getData('GADM', country='LUX', level=5)
plot(LUX4)
head(LUX4@data)
library(raster)
LUX3 <- getData('GADM', country='LUX', level=3)
LUXT <- LUX3[LUX3@data$NAME_3=="Troisvierges",]
plot(LUXT)
boundaries(LUXT)
install.packages("maptools")
library(spatstat)
install.packages("spatstat")
library(spatstat)
bounding.box(LUXT)
boundingbox(LUXT)
boundingbox
?boundingbox
bbox(LUXT)
?bbox
library(sp)
bLUXT <- bbox(LUXT)
bLUXT
MAcode2$lat
bbox3 <- paste(bLUXT[1,1],bLUXT[2,1],bLUXT[1,2],bLUXT[2,2],sep=",")
abct <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox3,"%5D",sep=""))
abct
DEU3 <- getData('GADM', country='DEU', level=3)
DEU4 <- getData('GADM', country='DEU', level=4)
setwd("D:/Daten/Daten/GeoDaten")
library(maptools)
MA <- readShapePoly("ManMannheim.shp")
library(rgdal)
MA <- readOGR ("ManMannheim.shp","ManMannheim")
PLZ <- readOGR ("post_pl.shp","post_pl")
head(PLZ@data)
MA <- PLZ[PLZ@data$PLZORT99=="Mannheim",]
bbox(MA)
bMA <- bbox(MA)
bbox4 <- paste(bMA[1,1],bMA[2,1],bMA[1,2],bMA[2,2],sep=",")
abcm <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=",bbox4,"%5D",sep=""))
abcm
?xmlToList
xmlToList(abcm)
List_abcm <- xmlToList(abcm)
List_abcm
List_abcm[[1]]
List_abcm$tag
List_abcm[[1]]$tag
List_abcm[[1]][1]
List_abcm[[1]][2]
List_abcm[[2]][2]
DF_abcm <- xmlToDataFrame(abcm)
List_abcm[[2]][2]
List_abcm[[2]]
"name"%in%List_abcm[[2]]
names("name"%in%List_abcm[[2]])
xmltop(abcm)
install.packages("gridExtra")
require("gridExtra")
xmltop(abcm)
xmlRoot(abcm)
xmltop <- xmlRoot(abcm)
xmlName(xmltop[[1]])
xmlName(xmltop)
library(plyr)
Madhu2012=ldply(List_abcm, data.frame)
Madhu2012
head(Madhu2012)
List_abcm
List_abcm[[1]]
List_abcm[[1]][[1]]
unlist(List_abcm[[1]])
List_abcm2 <- lapply(unlist,List_abcm)
List_abcm2 <- lapply(List_abcm,unlist)
List_abcm2
List_abcm2[[1]]
ListEl <- lapply(List_abcm,unlist)
which(ListEl=="name")
ListEl <- lapply(List_abcm,unlist)
which(ListEl=="name")
ListEl
xList<- lapply(List_abcm,unlist)
ListEl <- xList[[1]]
which(ListEl=="name")
ListEl[which(ListEl=="name")+1]
request_xapi <- function(bb_x,object_x){
bbox_x <- paste(bb_x[1,1],bb_x[2,1],bb_x[1,2],bb_x[2,2],sep=",")
xapi_x <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep=""))
}
MA_pg <-  request_xapi(bb_x=bbox(MA),object_x="leisure=playground")
paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep="")
object_x="leisure=playground"
paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep="")
bb_x=bbox(MA)
paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep="")
bb_x <- paste(bb_x[1,1],bb_x[2,1],bb_x[1,2],bb_x[2,2],sep=",")
bbox_x <- paste(bb_x[1,1],bb_x[2,1],bb_x[1,2],bb_x[2,2],sep=",")
bb_x=bbox(MA)
bbox_x <- paste(bb_x[1,1],bb_x[2,1],bb_x[1,2],bb_x[2,2],sep=",")
paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep="")
xapi_x <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep=""))
request_xapi <- function(bb_x,object_x){
bbox_x <- paste(bb_x[1,1],bb_x[2,1],bb_x[1,2],bb_x[2,2],sep=",")
xapi_x <- xmlParse(paste("http://open.mapquestapi.com/xapi/api/0.6/node%5B",object_x,"%5D%5Bbbox=",bbox_x,"%5D",sep=""))
}
MA_pg <-  request_xapi(bb_x=bbox(MA),object_x="leisure=playground")
MA_bakery <-  request_xapi(bb_x=bbox(MA),object_x="shop=bakery")
MA_bakery
setwd("C:/Users/kolbjp/Documents/GitHub/GeoData/geosmdata2/R")
