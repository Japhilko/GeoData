# Pakete kÃ¶nnen auch erneuert werden
update.packages("Cairo")
install.packages("reshape2")
#------------------------#
# Lehren mit R
#------------------------#
install.packages("fBasics")
install.packages("TeachingSampling")
install.packages("datasets")
install.packages("faraway")
install.packages("LearnBayes")
install.packages("TeachingDemos")
#------------------------#
# Graphikpakete
#------------------------#
install.packages("lattice")
install.packages("ggplot2")
install.packages("vcd")        # Visualisierung von kategorialen Daten
install.packages("rggobi")
install.packages("beeswarm")   # Weitere Alternative zu Boxplots
install.packages("plotrix")   # Various plotting functions
install.packages("vioplot")
install_github('arcdiagram', username='gastonstat')
install.packages("corrgram")
install.packages("PerformanceAnalytics")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("faraway")
install.packages("LearnBayes")
install.packages("TeachingDemos")
install.packages("lattice")
install.packages("ggplot2")
install.packages("vcd")        # Visualisierung von kategorialen Daten
install.packages("rggobi")
install.packages("beeswarm")   # Weitere Alternative zu Boxplots
install.packages("plotrix")   # Various plotting functions
install.packages("vioplot")
install_github('arcdiagram', username='gastonstat')
library(devtools)
install_github('arcdiagram', username='gastonstat')
install.packages("corrgram")
install.packages("PerformanceAnalytics")
install.packages("beanplot")
install.packages("ggparallel")
install.packages("aplpack")
install.packages("gplots")
#------------------------#
# Reproduzierbare Forschungsergebnisse
#------------------------#
install.packages("knitr")
install.packages("knitcitations")
install.packages("bibtex")
# Tabellen in LaTeX erstellen:
install.packages("stargazer")
install.packages("xtable")
install.packages("apsrtable")
#------------------------#
# Pakete fuer Geographie
#------------------------#
install.packages("sp")
install.packages("ggmap")
install.packages("spdep")
install.packages("maptools")
install.packages("rworldmap")
install.packages("rgeos")                 # Interface to Geometry Engine
install.packages("rasterVis")
install.packages("spacetime")
install.packages("PBSmapping")
install.packages("PBSmodelling")
install.packages("GEOmap")
install.packages("geomapdata")
install.packages("geosphere")
install.packages("GeoXp")
install.packages("spcosa")
install.packages("spatstat")
install.packages("geonames")
install.packages("RgoogleMaps")
install.packages("OpenStreetMap")
install.packages("osmar")
install.packages("RPyGeo")
install.packages("MarkedPointProcess")
install.packages("spatgraphs")
install.packages("DCluster")   # spatial clusters of diseases
# R als GIS nutzen
install.packages("gdistance")
install.packages("googleVis")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("geoPlot")
install.packages("SoDA")
install.packages("proj4")
install.packages("geocodeHERE")
install.packages("geonames")
install.packages("RDSTK")
install.packages("spgrass6")
install.packages("RSAGA")
install.packages("RArcInfo")
install.packages("geoR")
install.packages("fields")
install.packages("mapdata")
install.packages("gpclib")
install.packages("micromap")
install.packages("micromapST")
install.packages("SmarterPoland")
#------------------------#
# Datenquellen (geographisch)
#------------------------#
install.packages("rWBclimate")
install.packages("rgbif")
install.packages("oce")
install.packages("Quandl") # https://www.quandl.com/help/r
#------------------------#
# Pakete fuer Stichproben Schaetzung etc
#------------------------#
install.packages("survey")
install.packages("sampling")
install.packages("samplingVarEst")
install.packages("VGAM")
install.packages("fmsb") # beispielsweise um Nagelkerke zu berechnen
# Hierarchische Modelle, und Multilevel Modelle
install.packages("lme4")
install.packages("nlme")
install.packages("arm")
install.packages("hglm")   # Hierarchical Generalized Linear Models
install.packages("influence.ME")   # Tools for detecting influential data in mixed effects models
install.packages("MEMSS")
# Raking
install.packages("rake")  # Paket fÃ¼r das Raking
install.packages("anesrake")  # Paket fÃ¼r das Raking
install.packages("RankAggreg") # ebenfalls Raking
# Paket zur Berechnung von Cohen's D:
install.packages("compute.es")
install.packages("lsr")
#------------------------#
# Regression etc.
#------------------------#
install.packages("Zelig")
install.packages("phia")
install.packages("dummies")
install.packages("gmodels") # GREG mit binÃ¤ren Daten
#------------------------#
# Imputation
#------------------------#
install.packages("Amelia")
#------------------------#
# Das Internet mit R nutzen
#------------------------#
# Pakete fuer Dinge mit Internet
install.packages("rjson")
install.packages("googleVis")
install.packages("plotKML")
install.packages("lubridate")
install.packages("rplos")   #Interface to PLoS Journals API methods
install.packages("LaF")   # Fast access to large ASCII files
install.packages("rdryad")  # Dryad API interface
install.packages("RXKCD")   # Get XKCD comic from R
install.packages("rgbif") # A programmatic interface to the Web Service methods
install.packages("Rfacebook")
# Eine wordcloud mit R erstellen
install.packages("wordcloud")
install.packages("tm")    # Text Mining Package
#------------------------#
# Panel-Daten
#------------------------#
install.packages("plm")
#------------------------#
# Strukturgleichungsmodelle
#------------------------#
install.packages("semGOF")
install.packages("sem")
# install.packages("OpenMx")
# Netzwerkanalyse
install.packages("igraph")
install.packages("Statnet")
#------------------------#
# Psychologische Diagnostik
#------------------------#
install.packages("eRm")      # extended Rasch modeling
install.packages("pwr")
#------------------------#
# Optimierungsalgorithmen
#------------------------#
install.packages("DEoptim")
install.packages("GenSA")
install.packages("optimx")
install.packages("subselect")
#------------------------#
# Pakete fÃ¼r Verteilungen
#------------------------#
install.packages("timeDate")
install.packages("lmomco")
install.packages("modeest")
#------------------------#
# Screen Scraping
#------------------------#
install.packages("RSXML")
install.packages("scrapeR") # Paket fÃ¼r Web Scraping
install.packages("RGoogleAnalytics")
install.packages("rga")
#------------------------#
# Datenbanken
#------------------------#
install.packages("RPostgreSQL")
install.packages("RMySQL")
install.packages("RSQLite")
install.packages("RNetCDF")
install.packages("DBI")
install.packages("RJDBC")
#------------------------#
# Sonstige interessante Pakete
#------------------------#
install.packages("bindata")
install.packages("simba")
install.packages("proxy")
install.packages("gregmisc")
# Kombinatorik
install.packages("combinat")
install.packages("animation")
install.packages("plyr")
install.packages("reshape")
# Jobs verteilen
install.packages("Rmpi")
install.packages("SNOW")
install.packages("nws")
#------------------------#
# Schnittstellen zu anderen Programmen
#------------------------#
install.packages("jsonlite")
# rJava einladen
install.packages("rJava")
# http://www.rforge.net/JRI/
install.packages("JRI")
options(rpubs.upload.method = "internal")
?base:lm
?base::lm
library(wordcloud)
library(tm)
Befehle <- c("lookup.xport","read.arff","read.dbf",
"read.dta","read.epiinfo","read.mtp",
"read.octave","read.spss","read.ssd",
"read.systat","read.xport","write.arff",
"write.dbf","write.dta","write.foreign")
p <- sample(1:5,length(Befehle),replace=T)
p[Befehle=="read.spss"] <- 15
p[Befehle=="read.dta"] <- 12
p[Befehle=="write.dta"] <- 10
p[Befehle=="write.foreign"] <- 8
pal <- brewer.pal(6,"Dark2")
wordcloud(Befehle,p,colors=pal)
b <- c(1,2)
length(b)
# Das Maximum:
max(b)
# Minimum
min(b)
# Standardabweichung
sd(b)
# Varianz
var(b)
# Mittelwert
mean(b)
# Median
median(b)
# Das Ergebnis kann wieder einem Objekt zugewiesen werden
med_b <- median(b)
d <- c(1,4,3,7,9,5,4,3)
# Quantil berechnen:
quantile(d,0.9)
# hier werden 2 Elemente aus d gezogen
sample(x=d,size=2,replace=FALSE)
# jedes Mal können andere Ergebnisse resultieren
# hier wird nur ein Element gezogen
sample(x=d,size=1,replace=FALSE)
# auch dieses Ergebnis kann wieder in einem Element
# gespeichert werden
stichA <- sample(x=d,size=1,replace=FALSE)
```
A <- c(5,4,3)
is.numeric(A)
str(A)
B <- c(T,F,T,T)
is.logical(B)
str(B)
C <- c("AB","F","23")
is.logical(C)
str(C)
D <- c(1,3,"A")
str(D)
b <- c(1,2)
log <- c(T,F)
char <- c("A","b")
fac <- as.factor(c(1,2))
# mit as... kann man also umwandeln
as.character(b)
# wenn man das nicht in Objekt speichert
# merkt es es sich R auch nicht
b
b <- c(1,2) # numeric
log <- c(T,F) # logical
char <-c("A","b") # character
fac <- as.factor(c(1,2)) # factor
library(maptools)
data(wrld_simpl)
table(wrld_simpl$REGION)
Europe <- wrld_simpl[wrld_simpl$REGION=="150",]
plot(Europe,col="royalblue")
wrld_simpl$NAME
sort(wrld_simpl$NAME)
plot(threeStates)
threeStates <- wrld_simpl[wrld_simpl$NAME%in%c("Germany","Poland","Denmark"),]
plot(threeStates)
plot(threeStates,col="chocolate1")
library(maptools)
data(wrld_simpl)
head(wrld_simpl@data)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(ggplot2)
qplot(data=diamonds,x=cut,y=depth,color=carat)
head(diamonds)
myGG<-qplot(data=diamonds,x=carat,y=depth,color=carat)
qplot(data=diamonds,x=carat,y=depth,color=carat)
myGG + stat_smooth(method="lm")
ggsave("Graphik.jpg")
library(knitr)
?kable
kable(head(iris), format = "latex")
kable(head(iris), format = "html")
head(world.cities)
kable(head(iris), format = "html")
data(world.cities)
data(world.cities)
library(maps)
map.cities(world.cities)
?world.cities
map.cities(world.cities)
dev.off()
map("world", "China")
map.cities(country = "China", capitals = 2)
map.cities(country = "China", capitals = 2)
data(us.cities)
data(us.cities)
map("world", "Germany")
map.cities(country = "Germany")
?map.cities
map.cities(country = "Germany",capitals=3)
map("world", "Germany")
map.cities(country = "Germany",capitals=3)
map.cities(country = "Germany",capitals=2)
map.cities(country = "Germany",capitals=1)
world.cities
data(world.cities)
head(world.cities)
?par
map("world", "Germany")
map.cities(country = "Germany",pch=20)
map.cities(country = "Germany",pch=20,col="red")
library(maptools)
data(wrld_simpl)
plot(wrld_simpl)
my_map@data$color <- c("blue","green")
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
EuropeList <- c('Germany', 'France')
my_map <- wrld_simpl[wrld_simpl$NAME %in% EuropeList, ]
plot(my_map)
my_map@data$color <- c("blue","green")
plot(my_map,col=my_map@data$color)
library(sp)
library(maptools)
data("wrld_simpl")
ind <- wrld_simpl@data$ISO2%in%c("FR","DE")
my_map <- wrld_simpl[ind,]
plot(my_map)
ind <- wrld_simpl@data$ISO2%in%c("FR","DE","AT","CH")
my_map <- wrld_simpl[ind,]
plot(my_map)
library(knitr)
my_map@data
library(foreign)
library(lme4)
library(R2WinBUGS)
install.packages("R2WinBUGS")
library(R2WinBUGS)
?bugs
model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
# Let's take a look:
file.show(model.file)
model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
# Let's take a look:
file.show(model.file)
data(schools)
schools
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list(J=J, y=y, sigma.y=sigma.y)
inits <- function(){
list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
sigma.theta=runif(1, 0, 100))
}
parameters <- c("theta", "mu.theta", "sigma.theta")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="c:/Program Files/WinBUGS14/")
print(schools.sim)
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="c:/Program Files/WinBUGS14/")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="C:/Program Files (x86)/WinBUGS14/")
?"lme4-package"
library(rcppbugs)
install.packages("rcppbugs")
library(R2jags)
install.packages("R2jags")
library(R2jags)
install.packages("rjags")
library(R2jags)
library(rjags)
library(R2jags)
library(rjags)
date()
?jags.model
N <- 20
m <- 10
n <- 5
y0 <- outer(rep(1,m),(1:N),FUN="+")
s <- sample(N,n,replace=TRUE)
y <- y0[,s]
ybar_i  <- colMeans(y)
v_hat   <- sum( (ybar_i - sum(ybar_i)/n)^2 )/(n*(n-1))
s_2     <- var(as.vector(y))
si_2    <- apply(y,2,FUN=var)
SSW     <- sum(si_2)*(m-1)
SST     <- (n*m-1)*s_2
sig_hat_hat <- (n*m-1)/(m*(n-1))*s_2-(m-1)/(m*n*(n-1))*sum(si_2)
Deff_hat_hat <- v_hat/sig_hat_hat*n
Deff_hat     <- v_hat/s_2*n
v_hat
s_2
sig_hat_hat
Deff_hat_hat
Deff_hat
block_vd2 <- function(y,PSU){
d=0
for(i in 1:length(PSU)){
ym1 <- y[i]
ym2 <- y[PSU!=PSU[i]]
d   <- d+sum(outer(ym1,ym2,"-")^2)
}
return(d)
}
block_mean <- function(y,SP){aggregate(y,by=list(SP),FUN="mean")}
# block_sih(y,PSU): Varianzen der y-Werte in den SamplePoints
block_sih <- function(y,SP){aggregate(y,by=list(SP),FUN="var")  }
#######################################
sig_hat <- function(ys,Mhs,ss_list,N,K){
n     <- length(ss_list)-1  # Zahl der ausgewählten PSUs
s_PSU <- unlist(ss_list[[1]]) # i-te Stelle gibt gezogene PSU im i-ten Zug an, i=1,..,n
mhs      <- rep(0,n)         # Stichprobenumfänge in den ausgewählten PSUs
for(i in 1:n){ mhs[i] <- length(ss_list[[i+1]]) }
w        <- prod(Mhs/K)/prod(choose(Mhs,mhs)) # Gewicht für Stichproben
S2       <- var(ys)
PSU_v    <- rep(1:n,times=mhs)  # geändert 11.12.2014
ybar_i  <- block_mean(ys,PSU_v)[,2]
sih2    <- block_sih(ys,PSU_v)[,2]
Hi      <- table(s_PSU)
Hi      <- Hi[as.character(s_PSU)]  # Hi gibt für jede ausgewählte PSU die Häufigkeit an, mit der sie in der Stichprobe vorkommt
e       <- sum(ybar_i)/n   # Schätzer für ty/K
v1      <- 1/(n*K)*sum( (Mhs-1)*sih2 )
v2      <- sum( (n-Hi)*( (mhs-1)/mhs*sih2) )/(n*(n-1))
v3      <- block_vd2(ybar_i,s_PSU)/(2*n*(n-1))
sig2_hat <- v1+v2+v3 # Schätzer für sigma^2
v_hat   <- sum( (ybar_i - sum(ybar_i)/n)^2 )/(n*(n-1))  # Varianzschätzung des Schätzers für Y_bar
return(list(e,v_hat,sig2_hat,S2,w))
}
ys  <- as.vector(y)
Mhs <- rep(m,n)
MM <- matrix(1:(m*N),m,N)
ss_list <- list(s)
for(i in 1:n){
ss_list <- c(ss_list,list(MM[,s[i]]))
}
K   <- N*m
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean       =",erg[[1]]),"\n",
paste("Varianzschätzer         =",erg[[2]]),"\n",
paste("Schätzer für sigma^2    =",erg[[3]]),"\n",
paste("Stichprobenvarianz      =",erg[[4]]),"\n",
paste("Schätzer für Deff       =",erg[[2]]/erg[[3]]*n*m),"\n",
paste("Schätzer für Deff(s^2)  =",erg[[2]]/erg[[4]]*n*m),"\n",
paste("Gewicht                 =",erg[[5]]),"\n"
)
ti <- colSums(y0)
V_est <- (mean(ti^2)-mean(ti)^2)/(n*K^2)*N^2
sigma_2 <- mean(as.vector(y0)^2)-mean(as.vector(y0))^2
Deff <- V_est/sigma_2*n*m  # Stichprobenumfang n*m
cat(
paste("  Mittelwert(y-Werte)    =",mean(y0)),"\n",
paste(" Varianz des Schätzers  =",V_est),"\n",
paste(" sigma^2                =",sigma_2),"\n",
paste(" Deff                   =",Deff),"\n")
data.path <- "C:/Users/kolbjp/Documents/GitHub/GeoData/geosmdata2/data"
setwd(data.path)
