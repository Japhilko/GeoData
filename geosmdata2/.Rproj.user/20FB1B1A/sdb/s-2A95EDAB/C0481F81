{
    "contents" : "---\ntitle: \"Use OSM API overpass\"\nauthor: \"Jan-Philipp Kolb\"\ndate: \"12. Juni 2015\"\noutput: html_document\n---\n\n```{r,echo=F}\nExamples <- F\n```\n\n\n\n\n## Introduction\n\nThe package [osmar](http://cran.r-project.org/web/packages/osmar/index.html) provides good possibilities to download information about small areas from  \n[OpenStreetMap](http://www.openstreetmap.org/). But there are shortcommings too. Sometimes you might want to have information only on one specific topic and you want that information for a bigger area. In this case osmar might not be the perfect solution.  \n\n## Download specific information\n\nThere are several ways to download information from OpenStreetMap. On of these possibilities is the mapquest Xapi Service:\n\n<http://open.mapquestapi.com/xapi/>\n\nTo get information, you have to specify a bounding box:\n\n[left,bottom,right,top]\n\nor:\n\n[east,south,west,north]\n\nor:\n\n[lon.min,lat.min,lon.max,lat.max]\n\n\nfor example Mannheim Seckenheim:\n\n[8.5382,49.4573,8.5808,49.4759]\n\nLinks to download information from this section (pubs in this case):\n\n<http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=8.5382,49.4573,8.5808,49.4759%5D>\n\n## Using R to download information:\n\nThe library [XML](http://cran.r-project.org/web/packages/XML/index.html) is essential to perform the following steps:\n\n```{r}\nlibrary(XML)\n```\n\n\nNow the command xmlParse can be used to download information:\n\n```{r,eval=Examples}\nab <- xmlParse(\"http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=-77.041579,38.885851,-77.007247,38.900881%5D\")\n\nbbox <- \"-77.041579,38.885851,-77.007247,38.900881\"\nabc <- xmlParse(paste(\"http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=\",\n                      bbox,\"%5D\",sep=\"\"))\n```\n\nFinding a specific place\n\n```{r,eval=Examples}\nlibrary(ggmap)\n  # lon - east west\n  # lat - south north\nMAcode1 <- geocode(\"Mannheim Sandhofen\")\nMAcode2 <- geocode(\"Mannheim Rheinau\")\n\nMAcode3 <- geocode(\"Mannheim Schloss\")\nMAcode4 <- geocode(\"Mannheim Wallstadt\")\n\n  # [left,bottom,right,top]\nbbox2 <- paste(MAcode3$lon,MAcode2$lat,MAcode4$lon,MAcode1$lat,sep=\",\")\nabcd <- xmlParse(paste(\"http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=\",\n                       bbox2,\"%5D\",sep=\"\"))\n```\n\nGetting a bounding box from administrative areas. Which are downloaded from GADM. \n\n```{r,eval=Examples}\nlibrary(raster)\nLUX3 <- getData('GADM', country='LUX', level=3)\n\nLUXT <- LUX3[LUX3@data$NAME_3==\"Troisvierges\",]\n```\n\n```{r,eval=Examples}\nlibrary(sp)\nbLUXT <- bbox(LUXT)\nbbox3 <- paste(bLUXT[1,1],bLUXT[2,1],bLUXT[1,2],bLUXT[2,2],sep=\",\")\nabct <- xmlParse(paste(\"http://open.mapquestapi.com/xapi/api/0.6/node%5Bamenity=pub%5D%5Bbbox=\",\n                       bbox3,\"%5D\",sep=\"\"))\n```\n\n\nAn overview of the different map features is available on the [OSM wiki](http://wiki.openstreetmap.org/wiki/Map_Features).\n\n## The overpass API\n\nInstead of xapi you should use the overpass API. [Here](http://wiki.openstreetmap.org/wiki/DE:Overpass_API/Beispielsammlung#Stra.C3.9Fenliste) are some use cases available.\n\nYou can get all streets in Troisdorf with the following command:\n\n```{r,eval=Examples}\nTroisdorf <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Troisdorf\\\"];way(area)[highway][name];out;\")\n```\n\n[Information on how to organise the command line.](http://overpass-api.de/command_line.html)\n\n\nExample: Find all cinemas in Bonn which are at most 100m away from bus stops \n\n```{r,eval=Examples}\nCinemasBonn <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Bonn\\\"];node(area)[highway=bus_stop];node(around:100)[amenity=cinema];out;\")\n```\n\nAll restaurants in Ilvesheim:\n```{r,eval=Examples}\nrestaurantIlvesheim <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Ilvesheim\\\"];node(area)[amenity=restaurant];out;\")\n```\n\nFind restaurants in Feudenheim (admin_level=9)\n\n```{r,eval=Examples}\nrestaurantFeudenheim <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Feudenheim\\\"];node(area)[amenity=restaurant];out;\")\n```\n\nGet the administrative boundaries for the city of Mannheim:\n\n```{r,eval=Examples}\nboundaryMA <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Mannheim\\\"];way(area)[boundary=administrative];out;\")\n```\n\nMore than one condition:\n\n```{r,eval=Examples}\nboundMA <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Mannheim\\\"];way(area)[boundary=administrative][admin_level=9];out;\")\n```\n\n\n\n## Output options\n\nMore about the [Query language](http://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) used to get information via the overpass API.\n\n\n```{r,eval=Examples}\ngeomMA <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Mannheim\\\"];way(area)[boundary=administrative];out geom;\")\n```\n\nFive different output formats are possible, a description is available [here](http://overpass-api.de/output_formats.html).\n\nThis [url](http://overpass-api.de/api/interpreter?data=[out:csv(::\"type\",::\"id\")];area[name=\"Feudenheim\"];node(area)[amenity=restaurant];out;) can be used to get a csv:\n\n\nThis can be also used to load data directly into the workspace of R:\n\n```{r,eval=Examples}\ninfo <- read.csv(\"http://overpass-api.de/api/interpreter?data=[out:csv(::\\\"type\\\",::\\\"id\\\")];area[name=\\\"Feudenheim\\\"];node(area)[amenity=restaurant];out;\")\n```\n\n\n```{r,eval=Examples}\ninfoBayern <- xmlParse(\"http://www.overpass-api.de/api/interpreter?data=area[name=\\\"Bayern\\\"];way(area)[amenity=charging_station];out;\")\n```\n\n\n## Processment of XML data\n\nOne way to process information from a XML is to use the command [xmlToList](http://www.inside-r.org/packages/cran/XML/docs/xmlToList)\n\n```{r,eval=Examples}\nroot <- xmlRoot(boundMA)\ninfoAttrs <- xmlSApply(root, xmlAttrs)\n\n```\n\n\n\n\n## Usage of overpass API\n\nAn [example](http://statistik-stuttgart.de/r-osm-maps-with-osmar-and-the-overpass-x-api/) on how to use the [overpasse API](http://wiki.openstreetmap.org/wiki/Overpass_API) with R.  \n\n[Overpass-turbo](https://www.mapbox.com/guides/overpass-turbo/) is an alternative, but no API. \n\n[OpenAlfaPlot]((ttp://blog-en.openalfa.com/how-to-query-openstreetmap-using-the-overpass-api)) on how to query Openstreetmap using the Overpass API. \n\n\n[About overpass API in German](http://podcast.openstreetmap.de/2012/12/28/osmde009-osm-talk-die-overpass-api/)\n\n\n## Defining an adequate bounding box\n\n<http://gis.stackexchange.com/questions/46954/clip-spatial-object-to-bounding-box-in-r>\n\n\n[All streets project](http://benfry.com/writing/archives/category/allstreets)\n\n\nClipping spatial data in R:\n\n<http://robinlovelace.net/r/2014/07/29/clipping-with-r.html>\n\nOther information:\n\n<http://gis.stackexchange.com/questions/18124/how-do-i-download-specific-openstreetmap-data-by-tag>\n\n## More information on getting data from the web with R\n\nFirst off all I would recomend the following website <http://gastonsanchez.com/work/webdata/>\n\nThere is a CRAN task view on [Web Technologies and Services](http://cran.r-project.org/web/views/WebTechnologies.html)\n\n\n\n<http://www.data2type.de/xml-xslt-xslfo/xpath/xpath-einfuehrung/>  \n\n<http://www.w3schools.com/xpath/xpath_axes.asp>\n\n<http://gastonsanchez.com/blog/resources/2014/05/12/Web-data.html>\n\n\n\nStreets of ...\n\n<http://statistik-stuttgart.de/r-street-of-france/>\n",
    "created" : 1437115173362.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "93569665",
    "id" : "C0481F81",
    "lastKnownWriteTime" : 1437115724,
    "path" : "~/GitHub/GeoData/workshops/J_overpass.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_markdown"
}