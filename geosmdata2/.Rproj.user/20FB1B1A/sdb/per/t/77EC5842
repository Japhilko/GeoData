{
    "contents" : "---\ntitle: \"ggmap\"\nauthor: \"Jan-Philipp Kolb\"\ndate: \"13 April 2015\"\noutput: ioslides_presentation\n---\n\n```{r,echo=F}\nEx <- T\nCa <- T\nlibrary(knitr)\n```\n\n\n\n## Library ggmap\n\n```{r,message=F}\nlibrary(ggmap)\n```\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(\"Mannheim\")\nMA_map <- qmap(\"Mannheim\",zoom=14)\n```\n\n## Other zoom level\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 12)\n```\n\n## Get closer\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 13)\n```\n\n\n## Get very close\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 20)\n```\n\n## ggmap - source\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 14, source=\"osm\")\n```\n\n\n## ggmap - maptype\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 14, maptype=\"satellite\")\n```\n\n## ggmap - maptype\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 14, maptype=\"hybrid\")\n```\n\n\n## ggmap - maptype\n\n```{r,message=F,eval=Ex,cache=Ca}\nqmap(location = 'Mannheim', zoom = 14,\n maptype=\"toner\",source=\"stamen\")\n```\n\n## Other ways to get a map\n\n- qmap is a wrapper for ggmap and get_map\n- with get_googlemap you get similar results\n\n```{r,message=F,eval=Ex,cache=Ca}\nMAmap <- get_googlemap(\"Mannheim\")\nggmap(MAmap)\n```\n\n\n## Geocoding\n\n> Geocoding (...) uses a description of a location, most typically a postal address or place name, to find geographic coordinates from spatial reference data ... \n\n[Wikipedia - Geocoding](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes)\n\n```{r,message=F,eval=F}\ngeocode(\"Mannheim University\")\n```\n\n```{r,echo=F,message=F,cache=Ca}\nMAgc <- geocode(\"Mannheim University\")\nkable(MAgc)\n```\n\n## Geocoding - points of interest\n\n```{r,eval=F}\nPOI1 <- geocode(\"B2, 1 Mannheim\")\nPOI2 <- geocode(\"Hbf Mannheim\")\nPOI3 <- geocode(\"Wasserturm Mannheim\")\n```\n\n\n## Geocoding - with a loop\n\n```{r,message=F,eval=Ex,cache=Ca}\nPOI <- c(\"B2, 1 Mannheim\",\"Hbf Mannheim\",\n         \"Wasserturm Mannheim\")\n\nListPOI <- data.frame(lat=NA,lon=NA)\n\nfor ( i in 1:length(POI)){\n  geoPOI <- geocode(POI[i])\n  ListPOI[i,\"lat\"] <-  geoPOI$lat \n  ListPOI[i,\"lon\"] <-  geoPOI$lon \n}\n```\n\n## Points in map\n\n[Article by David Kahle and Hadley Wickham](http://journal.r-project.org/archive/2013-1/kahle-wickham.pdf) on the usage of ggmap.\n\n\n```{r,message=F,warning=F,eval=Ex,cache=Ca}\nMA_map +\ngeom_point(aes(x = lon, y = lat),\ndata = ListPOI)\n```\n\n## More about adding points\n\n- Usage of [geom_point](http://zevross.com/blog/2014/07/16/mapping-in-r-using-the-ggplot2-package/)\n- Question on [stackoverflow](http://stackoverflow.com/questions/15069963/getting-a-map-with-points-using-ggmap-and-ggplot2)\n\n\n## ggmap - adding colors\n\n```{r,eval=Ex,cache=Ca}\nListPOI$color <- c(\"A\",\"B\",\"C\")\nMA_map +\ngeom_point(aes(x = lon, y = lat,col=color),\ndata = ListPOI)\n```\n\n## ggmap - bigger dots\n\n```{r,eval=Ex,cache=Ca}\nListPOI$size <- c(10,20,30)\nMA_map +\ngeom_point(aes(x = lon, y = lat,col=color,size=size),\ndata = ListPOI)\n```\n\n\n\n```{r,eval=F,echo=F}\n#library(devtools)\n#devtools::install_github(\"Japhilko/GeoData/geosmdata2\")\nlibrary(geosmdata2)\n```\n\n## Cheatsheet\n\n- Cheatsheet on [data visualisation](https://www.rstudio.com/wp-content/uploads/2015/04/ggplot2-cheatsheet.pdf)\n\n![pic](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.png)\n\n\n## Get the distance between 2 points\n\n```{r,message=F,eval=Ex,cache=Ca}\nmapdist(\"Q1, 4 Mannheim\",\"B2, 1 Mannheim\")\n```\n\n```{r,message=F,eval=Ex,cache=Ca}\nmapdist(\"Q1, 4 Mannheim\",\"B2, 1 Mannheim\",mode=\"walking\")\n```\n\n## Get another distance\n\n```{r,message=F,eval=Ex,cache=Ca}\nmapdist(\"Q1, 4 Mannheim\",\"B2, 1 Mannheim\",mode=\"bicycling\")\n```\n\n## Contourplot - preparing the data\n\n```{r,cache=T,message=F,warning=F,message=F,results='hide'}\nlibrary(geosmdata2)\nxml_obj <- get_osm_nodes(\"bakery\",\"Berlin\")\ninfo <- extract_info_op(xml_obj,\"bakery\")\n```\n\n## Contourplot - get the map\n\n```{r,cache=T,message=F}\nlibrary(ggmap)\nImap <- qmap(location = \"Berlin\", zoom = 11, maptype=\"toner\",source=\"stamen\")\nImap\n```\n\n## Another contourplot\n```{r,cache=T}\nImap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,\n                                       alpha = ..level..), bins = 80, \n                      geom = 'polygon')\n```\n\n\n\n\n\n## Make first contourplot\n\nThe example is taken from [here](http://www.r-bloggers.com/contour-and-density-layers-with-ggmap/)\n\n```{r}\nImap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=1.5)\n```\n\n\n## [Visualize with hexbins](http://rud.is/b/2015/05/15/u-s-drought-monitoring-with-hexbin-state-maps-in-r/)\n\n![pic](https://rud.is/b/wp-content/uploads/2015/05/201505151.png)\n\n## [Another ggmap example](http://blog.corynissen.com/2015/05/creating-styled-google-maps-in-ggmap.html)\n\n![pic2](http://i.imgur.com/WJEyxMC.jpg)\n\n",
    "created" : 1437564164380.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3513316121",
    "id" : "77EC5842",
    "lastKnownWriteTime" : 1437566175,
    "path" : "~/GitHub/GeoData/workshops/C_ggmap.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_markdown"
}