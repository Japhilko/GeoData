lon_i <- mean( lon ,na.rm=T)
lat_i <-  mean( lat,na.rm=T )
ind_k <- which(names(Liste_i)=="k")
ind_v <- which(names(Liste_i)=="v")
Liste[[i]] <- data.frame(k=Liste_i[ind_k],
v=Liste_i[ind_v],
id=rep(way_id[i],length(ind_k)),
lat=rep(lat_i,length(ind_k)),
lon=rep(lon_i,length(ind_k))
)
}
way_node_save
library(geosmdata2)
object_x <- "amenity=school"
bbox_x <- "8.4178134,49.41014103,8.59395996,49.58984376"
schools_MA <- xmlParse(paste("http://www.overpass-api.de/api/xapi?way[bbox=",bbox_x,"][",object_x,"]",
sep=""))
info <- extract_info_op(OSM.Data=schools_MA,value="school")
library(geosmdata2)
object_x <- "amenity=school"
bbox_x <- "8.4178134,49.41014103,8.59395996,49.58984376"
schools_MA <- xmlParse(paste("http://www.overpass-api.de/api/xapi?way[bbox=",bbox_x,"][",object_x,"]",
sep=""))
info <- extract_info_op(OSM.Data=schools_MA,value="school")
info
head(info)
?extract_info_op
library(geosmdata2)
object_x <- "amenity=kindergarten"
bbox_x <- "8.4178134,49.41014103,8.59395996,49.58984376"
x_MA <- xmlParse(paste("http://www.overpass-api.de/api/xapi?way[bbox=",bbox_x,"][",object_x,"]",
sep=""))
library(XML)
x_MA <- xmlParse(paste("http://www.overpass-api.de/api/xapi?way[bbox=",bbox_x,"][",object_x,"]",
sep=""))
overpass_x <- extract_info_op(OSM.Data=x_MA,value="school")
extract_info_op
OSM.Data=x_MA
value="school"
way_id  <- unlist( xpathApply( OSM.Data, paste( "//tag[@v = '", value, "']/parent::way/@ id", sep = "" ) ) )
n_obj <- length(xpathApply( OSM.Data, "//way" ))
Liste <- list()
i<-1
Liste_i <- unlist(xpathApply( OSM.Data, paste("//way[@id = ",way_id[i],"]//tag/attribute::*",sep="") ) )
way_id[i]
OSM.Data
value
overpass_x <- extract_info_op(OSM.Data=x_MA,value="kindergarten")
overpass_x
library(geosmdata2)
data("osm_df")
head(osm_df)
library(geosmdata2)
data(osm_df)
?osm_df
library(geosmdata2)
Tab <- readHTMLTable("http://wiki.openstreetmap.org/wiki/Map_Features")
library(geosmdata2)
?get_osm_nodes
library(geosmdata2)
library(geosmdata2)
devtools::document()
library(geosmdata2)
library(geosmdata2)
library(geosmdata2)
data(uaBerlin)
pol_Berlin <- plotbui(uaBerlin)
plotbui
ua <- uaBerlin
ua_ids <- find(ua, way(tags(k == "building")))
plotbui <- function(ua){
ua_ids <- osmar::find(ua, way(tags(k == "building")))
ua_ids2 <- osmar::find_down(ua, way(ua_ids))
bg <- subset(ua, ids = ua_ids2)
bg_erg <- as_sp(bg, "polygons")
return(bg_erg)
}
v
pol_Berlin <- plotbui(uaBerlin)
ua_ids <- osmar::find(ua, way(tags(k == "building")))
osmar::find
?osmar::find
ua_ids <- find(ua, way(tags(k == "building")))
?find
osmar::find(ua, way(tags(k == "building")))
ua_ids <- osmar::find(ua, osmar::way(tags(k == "building")))
?way
ua_ids <- osmar::find(ua, osmar::way(osmar::tags(k == "building")))
ua_ids
ua_ids2 <- osmar::find_down(ua, osmar::way(ua_ids))
bg <- subset(ua, ids = ua_ids2)
bg_erg <- as_sp(bg, "polygons")
return(bg_erg)
bg_erg <- sp::as_sp(bg, "polygons")
library(geosmdata2)
dat <- c(8.417813,8.59396,49.410141,49.58984)
bb_x1 <- array(dat,c(2,2))
MA_bakery <-  request_xapi(bb_x=bb_x1,object_x="shop=bakery")
request_xapi
library(geosmdata2)
data.path <- "C:/Users/kolbjp/Documents/GitHub/GeoData/geosmdata2/data"
setwd(data.path)
load("osm_df.RData")
head(osm_df)
osm_df <- osm_df[complete.cases(osm_df),]
osm_df$Element <- NA
osm_df$Element[osm_df$Key=="aerialway"] <- "Way"
osm_df$Element[osm_df$Value=="pylon"] <- "Node"
osm_df$Element[osm_df$Key=="aeroway"] <- "Way"
osm_df$Element[osm_df$Key=="amenity"] <- "Node"
ind <- which(osm_df$Value=="school"&osm_df$Key=="building")
osm_df <- osm_df[-ind,]
osm_df
Tab <- readHTMLTable("http://wiki.openstreetmap.org/wiki/Map_Features")
library(XML)
Tab <- readHTMLTable("http://wiki.openstreetmap.org/wiki/Map_Features")
osmKey <- lapply(Tab,function(x)x$` Key`)
osmValue <- lapply(Tab,function(x)x$` Value`)
osm_df <- data.frame(Key=as.character(unlist(osmKey)),
Value=as.character(unlist(osmValue)))
osm_df <- osm_df[complete.cases(osm_df),]
osm_df$Element <- NA
osm_df$Element[osm_df$Key=="aerialway"] <- "Way"
osm_df$Element[osm_df$Value=="pylon"] <- "Node"
osm_df$Element[osm_df$Key=="aeroway"] <- "Way"
osm_df$Element[osm_df$Key=="amenity"] <- "Node"
nrow(osm_df)
osm_df
osm_df[1,]
head(osm_df)
head(osm_df,n=100)
head(osm_df,n=120)
head(osm_df,n=130)
osm_object <- get_osm_nodes(osm_df$Value[i],place="Sandhofen")
libraray(geoosmdata2)
library(geoosmdata2)
library(geosmdata2)
osm_object <- get_osm_nodes(osm_df$Value[i],place="Sandhofen")
osm_object
readHTMLTable("http://wiki.openstreetmap.org/wiki/Tag:aerialway%3Dcable_car")
data.path2 <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/data"
setwd(data.path2)
osm_df <- read.xlsx("OSMmapfeatures.xlsx",1)
library(xlsx)
setwd(data.path2)
osm_df <- read.xlsx("OSMmapfeatures.xlsx",1)
head(osm_df)
osm_df2 <- osm_df2
osm_df2 <- osm_df
osm_df <- osm_df2[,1:3]
head(osm_df)
osm_df[is.na(osm_df$Key),]
osm_df[is.na(osm_df$Value),]
osm_df <- osm_df[complete.cases(osm_df),]
osm_df
setwd(data.path)
save(osm_df,file="osm_df.RData")
osm_df
head(osm_df)
agrep("node",osm_df$Value[i])
agrep("node",osm_df$Value)
agrep("ode",osm_df$Value)
ind <- agrep("ode",osm_df$Value)
object2<- "school"
ind <- which(object2==osm_df$Value)
ind2 <- agrep("ode",osm_df$Value[ind])
ind2
if(length(ind)>0){
osm_df$Value[ind]
str(osm_df)
osm_df$Key <- as.character(osm_df$Key)
osm_df$Element <- as.character(osm_df$Element)
osm_df$Value <- as.character(osm_df$Value)
str(osm_df)
setwd(data.path)
save(osm_df,file="osm_df.RData")
ind2 <- agrep("ode",osm_df$Value[ind])
ind2 <- agrep("ode",osm_df$Element[ind])
ind2
ind2 <- agrep("node",osm_df$Element[ind])
ind2
library(geosmdata2)
schools <- get_osm_nodes("school",place="Montpellier")
info <- extract_info_op(OSM.Data=schools,value="school")
schools
object2="school"
place="Montpellier"
ind <- which(object2==osm_df$Value)
length(ind)>0
ind2 <- agrep("node",osm_df$Element[ind])
ind2
osm_df[ind]
osm_df[ind,]
ind <- ind2[1]
ind
ind2
ind
ind <- which(object2==osm_df$Value)
ind
ind <- ind[ind2[1]]
ind
get_osm_ways <- function(object2,place){
ind <- which(object2==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("way",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "way"
object <- paste(osm_df$Key[ind],"=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{stop("Try another function!")}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
roads <- get_osm_ways("secondary",place="Sandhofen")
roads
object2="secondary"
place="Sandhofen"
ind <- which(object2==osm_df$Value)
ind2 <- agrep("node",osm_df$Element[ind])
ind2
ind2 <- agrep("way",osm_df$Element[ind])
ind2
get_osm_nodes <- function(object2,place){
ind <- which(object2==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "node"
object <- paste(osm_df$Key[ind],"=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{
ind2 <- agrep("way",osm_df$Element[ind])
if(length(ind2)>0){stop("Try function get_osm_ways")
}else{"Try function get_osm_relation"}
}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
get_osm_ways <- function(object2,place){
ind <- which(object2==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("way",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "way"
object <- paste(osm_df$Key[ind],"=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){stop("Try function get_osm_nodes")
}else{"Try function get_osm_relation"}
}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
library(devtools)
install_github("https://github.com/Japhilko/GeoData/tree/master/geosmdata2")
?install_github
install_github("Japhilko/geosmdata2")
devtools::install_github("klutometis/roxygen")
devtools::install_github("Japhilko/geosmdata2")
devtools::install_github("Japhilko/GeoData/geosmdata2")
library(geosmdata2)
library(geosmdata2)
install.packages("stringi")
library(geosmdata2)
get_osm_relation <- function(object2,place){
ind <- which(object2==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("relation",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "relation"
object <- paste(osm_df$Key[ind],"=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){stop("Try function get_osm_nodes")
}else{"Try function get_osm_ways"}
}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
osm_df$Element
ind <- agrep(osm_df$Element)
ind <- agrep("relation",osm_df$Element)
ind
osm_df[ind,]
bike_routes <- get_osm_relation(object2="bicycle",place="München")
bike_routes <- get_osm_relation(object2="bicycle ",place="München")
bike_routes <- get_osm_relation(object2="train",place="München")
bike_routes <- get_osm_relation(object2="train",place="Mannheim")
library(geosmdata2)
bike_routes <- get_osm_relation(object2="train",place="Mannheim")
library(XML)
bike_routes <- get_osm_relation(object2="train",place="Mannheim")
train_routes <- bike_routes
data.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/data/XML"
setwd(data.path)
saveXML(train_routes,file="train_routes_Mannheim.xml")
train_routes
data.path <- "C:/Users/kolbjp/Documents/GitHub/GeoData/geosmdata2/data"
load("osm_df.RData")
setwd(data.path)
load("osm_df.RData")
osm_df[ind,]
osm_df[osm_df$Value=="bicycle ",]
osm_df$Value[osm_df$Value=="bicycle "] <- "bicycle"
setwd(data.path)
save(osm_df,file="osm_df.RData")
library(geosmdata2)
bike_routes <- get_osm_relation(object2="bycicle",place="München")
data.path <- "C:/Users/kolbjp/Documents/GitHub/GeoData/geosmdata2/data"
setwd(data.path)
load("osm_df.RData")
osm_df$Value[osm_df$Value=="bicycle "]
osm_df$Value[osm_df$Value=="bicycle"]
bike_routes <- get_osm_relation(object2="bicycle",place="München")
bike_routes
bike_routes <- get_osm_relation(object2="bicycle",place="Muenchen")
bike_routes
bike_routes <- get_osm_relation(object2="bicycle",place="Mannheim")
bike_routes
data.path3 <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/data/XML"
setwd(data.path3)
saveXML(bike_routes,file="bike_routes_Mannheim.xml")
brewery <- get_osm_nodes("brewery",place="München")
brewery
brewery <- get_osm_nodes("brewery",place="Mannheim")
brewery
ambulance_station <- get_osm_nodes("ambulance_station",place="München")
ambulance_station
ambulance_station <- get_osm_nodes("ambulance_station",place="Muenchen")
ambulance_station
Muenchen <- xmlParse("http://api.openstreetmap.org/api/0.6/relation/62428")
Muenchen
repluml <- function(x){
x <- gsub("ö","Ã¶",x)
x <- gsub("ä","Ã¤",x)
x <- gsub("ü","Ã¼",x)
return(x)
}
cityname <- repluml("München")
brewery <- get_osm_nodes("brewery",place=cityname)
brewery
install.packages("geocodeHERE")
?geocodeHERE
library(geocodeHERE)
?geocodeHERE
?"geocodeHERE_simple"
geocodeHERE_simple("chicago")
geocodeHERE_simple("wrigley field chicago IL")
geocodeHERE_simple("233 S Wacker Dr, Chicago, IL 60606")
addresses <- chicago_landmarks[,"Address"]
addresses <- paste(addresses, "chicago IL")
addresses_df <- data.frame(id=1:length(addresses), addresses=addresses)
address_str <- df_to_string(addresses_df)
## Not run:
request_id <- geocodeHERE_batch_upload(address_string = address_str,
email_address = "youremail<at>domain.com")
geocodeHERE_batch_status(request_id)
geocodeHERE_simple
get_osm_addresses <- function(object2,place){
ind <- which(object2==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "node"
object <- paste(object2,"=*",sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{
ind2 <- agrep("way",osm_df$Element[ind])
if(length(ind2)>0){stop("Try function get_osm_ways")
}else{"Try function get_osm_relation"}
}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
streets <- get_osm_addresses("addr:street","Sippersfeld")
get_osm_addresses <- function(object2,place){
ind <- which(object2==osm_df$Key)
if(length(ind)>0){
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
type_obj <- "node"
object <- paste(object2,"=*",sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
return(InfoList)
}else{
ind2 <- agrep("way",osm_df$Element[ind])
if(length(ind2)>0){stop("Try function get_osm_ways")
}else{"Try function get_osm_relation"}
}
}else{stop("Map feature not found - have a look at http://wiki.openstreetmap.org/wiki/Map_Features")}
}
streets <- get_osm_addresses("addr:street","Sippersfeld")
object2="addr:street"
place="Sippersfeld"
ind <- which(object2==osm_df$Key)
length(ind)>0
ind2 <- agrep("node",osm_df$Element[ind])
ind2
ind <- ind[ind2[1]]
type_obj <- "node"
object <- paste(object2,"=*",sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep="")
streets <- area[name="Sippersfeld"];way(area)[highway][name];out;
streets <- xmlParse("http://www.overpass-api.de/api/interpreter?data=area[name=\"Sippersfeld\"];way(area)[highway][name];out;")
streets
date()
r.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/rcode"
setwd(r.path)
ambulance_station <- get_osm_nodes("ambulance_station",place="Berlin")
setwd(data.path3)
saveXML(ambulance_station,file="ambulance_station_Berlin.xml")
CountNodes <- function(object2){
root <- xmlRoot(object2)
infoAttrs <- xmlSApply(root, xmlAttrs)
num_objects <- sum(names(infoAttrs)=="node")
return(num_objects)
}
CountNodes(ambulance_station)
geocode("Mannheim")
library(ggmap)
geocode("Mannheim")
geocode("Mannheim Sandhofen")
library(ggmap)
setwd("D:/Daten/Daten/GeoDaten")
library(xlsx)
setwd("D:/Daten/Daten/GeoDaten")
x1 <- read.xlsx2("Nordrhein_1ps.xlsx",sheetIndex=1,as.data.frame=TRUE,header=TRUE)
head(x1)
x1$Latitude  <- NA
x1$Longitude <- NA
for (j in 2500:nrow(x1)){
Erg <- geocode(paste(x1[j,"Strasse"],x1[j,"Plz"],x1[j,"gem_name_fin"]))
if (sum(is.na(Erg))==0){
x1$Latitude[j]  <- Erg$lon
x1$Longitude[j] <- Erg$lat
}
cat(j,"von",nrow(x1),"\n")
}
warnings()
x1
head(x1)
head(x1[2500:3000,])
date()
attr(x1,"Info") <- paste("Jan-Philipp Kolb",date())
getwd()
save(x1,file="Nordrhein_1ps.RData")
x1$Latitude
geocode("Mannheim")
geocode("Mannheim Sandhofen")
geocode("Mannheim Rheinau")
j<-2527
is.na(x1$Latitude[j])
Erg <- geocode(paste(x1[j,"Strasse"],x1[j,"Plz"],x1[j,"gem_name_fin"]))
geocdode("Forensbergerstrasse 1 52134 Herzogenrath")
?geocode
geocode("Forensbergerstrasse 1 52134 Herzogenrath")
streets <- xmlParse("http://www.overpass-api.de/api/interpreter?data=area[name=/"Sippersfeld/"];way(area)[highway][name];out;")
streets <- xmlParse(paste("http://www.overpass-api.de/api/interpreter?data=area[name=/"Sippersfeld/"];way(area)[highway][name];out;",sep=""))
streets <- xmlParse("http://www.overpass-api.de/api/interpreter?data=area[name=\"Sippersfeld\"];way(area)[highway][name];out;")
streets3
streets
setwd(data.path3)
saveXML(streets,"streets_Sippersfeld.xml")
extract_info_op(streets,"highway")
extract_info_op(streets,"residential")
streets
extract_info_op
xmlValue(streets)
root <- xmlRoot(streets)
extract_info_op(root,"residential")
xmlValue(root)
root <- xmlRoot(streets)
infoAttrs <- xmlSApply(root, xmlAttrs)
infoAttrs
infoAttrs <- xmlSApply(root, xmlValue)
infoAttrs
infoAttrs <- xmlSApply(root, xmlAttrs)
infoAttrs
infoAttrs <- xmlSApply(root, getSibling)
infoAttrs
xmlSApply(infoAttrs, xmlValue)
str(infoAttrs)
str(infoAttrs$way)
infoAttrs[[3]]
kindergarten <- get_osm_nodes(object2="kindergarten",place="Mannheim")
setwd(data.path3)
saveXML(kindergarten,file="kindergarten_Mannheim.xml")
info <- extract_info_op(OSM.Data=kindergarten,value="kindergarten")
info
str(kindergarten)
str(streets)
kindergarten
streets
info2 <- extract_info_op(OSM.Data=streets,value="highway")
info2 <- extract_info_op(OSM.Data=streets,value="residential")
kindergarten
