#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
#---------------------------------------#
# Read functions
#---------------------------------------#
setwd(r.path)
source("WeightALL_B_functions.R")
source("WeightALL_B1_sighat.R")
#---------------------------------------#
# Choose one variable
#---------------------------------------#
Descr <- c("Abitur","Alter","Bundesland","1=deutsch; 0 sonst","AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7",
"AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7","ALLGEMEINER SCHULABSCHLUSS 1,...,7")
Variablen <- c("abitur","v301","v975","deutsch","v318","v321","v327")
i<-7
nr       <- match(Variablen[i],colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
#---------------------------------------#
# Compute mean etc for western Germany
#---------------------------------------#
# West
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
ys_West   <- as.numeric(x_West[,nr]==6)
erg_West <- sig_hat2(ys=ys_West,
Mi=x$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N_West,K_West)
erg_West
#---------------------------------------#
# Survey Weighting with ALLBUS data
# Jan-Philipp Kolb und Siegfried Gabler
# Mon Jun 29 10:38:12 2015
#---------------------------------------#
#---------------------------------------#
# Generalities
#---------------------------------------#
rm(list=ls())
author <- "Jan-Philipp Kolb"
scriptname <- "WeightALL_C_ComputeWeights.R"
#---------------------------------------#
# Paths
#---------------------------------------#
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
r.path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/Rcode/rcodePaper"
#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
#---------------------------------------#
# Read functions
#---------------------------------------#
setwd(r.path)
source("WeightALL_B_functions.R")
source("WeightALL_B1_sighat.R")
#---------------------------------------#
# Choose one variable
#---------------------------------------#
Descr <- c("Abitur","Alter","Bundesland","1=deutsch; 0 sonst","AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7",
"AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7","ALLGEMEINER SCHULABSCHLUSS 1,...,7")
Variablen <- c("abitur","v301","v975","deutsch","v318","v321","v327")
i<-7
nr       <- match(Variablen[i],colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
#---------------------------------------#
# Compute mean etc for western Germany
#---------------------------------------#
# West
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
ys_West   <- as.numeric(x_West[,nr]==6)
erg_West <- sig_hat2(ys=ys_West,
Mi=x$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N_West,K_West)
erg_West
length(Mi)
#---------------------------------------#
# Survey Weighting with ALLBUS data
# Jan-Philipp Kolb und Siegfried Gabler
# Mon Jun 29 10:38:12 2015
#---------------------------------------#
#---------------------------------------#
# Generalities
#---------------------------------------#
rm(list=ls())
author <- "Jan-Philipp Kolb"
scriptname <- "WeightALL_C_ComputeWeights.R"
#---------------------------------------#
# Paths
#---------------------------------------#
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
r.path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/Rcode/rcodePaper"
#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
#---------------------------------------#
# Read functions
#---------------------------------------#
setwd(r.path)
source("WeightALL_B_functions.R")
source("WeightALL_B1_sighat.R")
#---------------------------------------#
# Choose one variable
#---------------------------------------#
Descr <- c("Abitur","Alter","Bundesland","1=deutsch; 0 sonst","AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7",
"AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7","ALLGEMEINER SCHULABSCHLUSS 1,...,7")
Variablen <- c("abitur","v301","v975","deutsch","v318","v321","v327")
i<-7
nr       <- match(Variablen[i],colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
#---------------------------------------#
# Compute mean etc for western Germany
#---------------------------------------#
# West
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
ys_West   <- as.numeric(x_West[,nr]==6)
erg_West <- sig_hat2(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N_West,K_West)
erg_West
summary(x_West$Mi)
summary(x_West$PSU)
table(x_West$PSU)
#---------------------------------------#
# Survey Weighting with ALLBUS data
# Jan-Philipp Kolb und Siegfried Gabler
# Mon Jun 29 10:38:12 2015
#---------------------------------------#
#---------------------------------------#
# Generalities
#---------------------------------------#
rm(list=ls())
author <- "Jan-Philipp Kolb"
scriptname <- "WeightALL_C_ComputeWeights.R"
#---------------------------------------#
# Paths
#---------------------------------------#
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
r.path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/Rcode/rcodePaper"
#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
#---------------------------------------#
# Read functions
#---------------------------------------#
setwd(r.path)
source("WeightALL_B_functions.R")
# source("WeightALL_B1_sighat.R")
#---------------------------------------#
# Choose one variable
#---------------------------------------#
Descr <- c("Abitur","Alter","Bundesland","1=deutsch; 0 sonst","AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7",
"AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7","ALLGEMEINER SCHULABSCHLUSS 1,...,7")
Variablen <- c("abitur","v301","v975","deutsch","v318","v321","v327")
i<-7
nr       <- match(Variablen[i],colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
#---------------------------------------#
# Compute mean etc for western Germany
#---------------------------------------#
# West
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
ys_West   <- as.numeric(x_West[,nr]==6)
erg_West <- sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N_West,K_West)
erg_West
library(xtable) # to produce a LaTeX table
xtable(erg_West)
x_West[,nr]
table(x_West[,nr])
tab_lev <- table(x_West[,nr])
data.frame(Variable=Variablen[j],
Level=names(tab_lev),
"Estimator mean"=NA)
j<-1
j<-7
data.frame(Variable=Variablen[j],
Level=names(tab_lev),
"Estimator mean"=NA)
data.frame(Variable=Variablen[j],
Level=names(tab_lev),
Estimator.mean=NA,
Variance estimator=NA,
Estimator.for.sigma.2=NA,
Sampling.variance=NA
)
erg_West <- data.frame(Variable=Variablen[j],
Level=names(tab_lev),
Estimator.mean=NA,
Variance.estimator=NA,
Estimator.for.sigma.2=NA,
Sampling.variance=NA
)
erg_West
for (i in 1:length(tab_lev)){
ys_West   <- as.numeric(x_West[,nr]==names(tab_lev)[i])
erg_West[i,3:6] <- sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N_West,K_West)
}
erg_West
xtable(erg_West)
library(XML)
date()
osm_df$Element2 <- rep("node",nrow(osm_df))
agrep("Way",osm_df$Element)
osm_df$Element2 <- rep("NA",nrow(osm_df))
agrep("relation",osm_df$Element)
osm_df$Element2[agrep("relation",osm_df$Element)] <- "relation"
osm_df$Element2[agrep("Way",osm_df$Element)] <- "way"
osm_df$Element2[agrep("Node",osm_df$Element)] <- "node"
table(is.na(osm_df$Element2))
osm_df$Element2[agrep("Area",osm_df$Element)] <- "area"
table(osm_df$Element2)
table(is.na(osm_df$Element2))
osm_df$Element2 <- rep(NA,nrow(osm_df))
osm_df$Element2[agrep("relation",osm_df$Element)] <- "relation"
osm_df$Element2[agrep("Area",osm_df$Element)] <- "area"
osm_df$Element2[agrep("Way",osm_df$Element)] <- "way"
osm_df$Element2[agrep("Node",osm_df$Element)] <- "node"
table(is.na(osm_df$Element2))
setwd(data.path)
save(osm_df,file="osm_df.RData")
library(geosmdata2)
osm_df[is.na(osm_df$Element2),]
head(osm_df)
osm_df[osm_df$Key=="Key",]
osm_df <- osm_df[-which(osm_df$Key=="Key"),]
head(osm_df)
osm_df[is.na(osm_df$Element2),]
setwd(data.path)
save(osm_df,file="osm_df.RData")
library(geosmdata2)
ambulance_station <- get_osm_nodes(object2="ambulance_station",place="Berlin")
CountNodes(ambulance_station)
brewery <- get_osm_nodes("brewery",place="München")
author <- "Jan-Philipp Kolb"
scriptname <- "rOSM_L_OSMgeocoding.R"
library(XML)
library(geosmdata2)
xml.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/data/XML"
data("osm_df")
place="Schifferstadt"
object2="addr:street"
main.path <- "H:/Forschung/Georeferenzierung/KiTasEntfernungen/"
data.path2 <- paste(main.path,"data",sep="")
data.path <- "D:/Daten/GeoDaten/"
GeoKG.path <- paste(data.path,"GeoKG/",sep="")
GeoData.path <- paste(main.path,"data/KGdata_stepbystep/",sep="")
graph.path <- "J:/Work/Statistik/Kolb/Paper/KiTa_Entfernungen/LaTeX/figure"
setwd(data.path2)
# Entfernungen einlesen
# so wie ich sie an Nicole Biedinger geschickt habe
# EntfData2.dta am 02.09.2013
Entf <- read.dta("EntfData2.dta")
library(foreign)
Entf <- read.dta("EntfData2.dta")
(load("eulev08.RData"))
Dat$ort
table(Dat$ort)
place="Ettlingen"
instance <- "http://www.overpass-api.de/api/"
streets_sf <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
streets <- streets_sf
setwd(xml.path)
saveXML(streets_sf,file=paste(place,"_streets.xml",sep=""))
instance <- "http://overpass.osm.rambler.ru/"
place="Wiesloch"
instance <- "http://overpass.osm.rambler.ru/"
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
instance <- "http://overpass.osm.rambler.ru/cgi/"
rm(streets)
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
saveXML(streets_sf,file=paste(place,"_streets.xml",sep=""))
rm(streets)
place="Sinsheim"
instance <- "http://www.overpass-api.de/api/"
instance <- "http://overpass.osm.rambler.ru/cgi/"
streets <- xmlParse(paste(instance,"interpreter?data=area[name~\"",place,"\"];way(area)[highway][name];out;",sep=""))
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
saveXML(streets_sf,file=paste(place,"_streets.xml",sep=""))
streets
info <- extract_info_op(streets,"highway")
infohead())
head(info)
saveXML(info,file=paste(place,"_info_streets.xml",sep=""))
save(info,file=paste(place,"_info_streets.RData",sep=""))
info$name
Str_namen <- as.character(info$name)
j<-1
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Str_namen[j],"\"];out;",sep=""))
paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Str_namen[j],"\"];out;",sep="")
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Klostergasse,"\"];out;",sep=""))
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"","Klostergasse","\"];out;",sep=""))
paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"","Klostergasse","\"];out;",sep="")
library(SPARQL)
install.packages("SPARQL")
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=","Klostergasse","\"];out;",sep=""))
houses
place
Str_namen
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=","Lauergasse","\"];out;",sep=""))
houses
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=*\"];out;",sep=""))
streets2
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way[\"addr:street=*\"];out;",sep=""))
streets2
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way[\"addr:street\"];out;",sep=""))
head(osm_df)
get_osm_nodes
object2="*"
object <- paste("addr:street=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
type_obj <- "node"
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep="")
paste(Link1,place,"\"];",type_obj,"(area)[\"",object,\""];out;",sep="")
paste(Link1,place,"\"];",type_obj,"(area)[\"",object,"\"];out;",sep="")
xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[\"",object,"\"];out;",sep=""))
info <- xmlParse(query)
link <- "http://overpass-api.de/api/interpreter?data="
query <- paste(link,"(way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);>;);out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way(50.745,7.17,50.75,7.18);out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);>;out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);out;",sep="")
info <- xmlParse(query)
info
nominatim <- function(location, output = c('latlon','latlona','more','all'),
messaging = FALSE) {
require(RCurl)
require(XML)
require(stringr)
require(plyr)
house <- FALSE
if (is.list(location)) {
house <- TRUE
house_number <- location[[1]]
# Extract first digits from house number
house_number_fdig <- str_extract(house_number, '^[0-9]*')
location <- str_c(house_number_fdig, location[[2]], sep = ',')
}
# Forming url
location <- str_replace_all(location, ' ', '+')
location <- URLencode(location)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', location)
# Geocode
if(messaging) message(str_c('contacting ', url_string, '...'), appendLF = F)
# gc <- getURL(url_string)
gc <- fromJSON(paste(readLines(url(url_string)), collapse = ''))
if(messaging) message(' done.')
return(gc)
# Extract place with required house number
gc <- xmlRoot(xmlTreeParse(gc, getDTD=F, useInternalNodes = T))
# return(xmlToList(gc))
if(house) {
gc <- getNodeSet(gc, str_c('//place[house_number/text() = "', house_number, '"]'))
if(output == 'all') return(xmlToList(gc[[1]]))
}
if(!house) {
return(xmlToList(gc))
}
#format geocoded data
return(gc)
}
nominatim("Mannheim Heumarkt 2")
library(rjson)
nominatim("Mannheim Heumarkt 2")
location="Mannheim Heumarkt 2"
library(ggmap)
geocode
location
house <- FALSE
is.list(location)
location <- str_replace_all(location, ' ', '+')
location <- URLencode(location)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', location)
url_string
info <- xmlParse(url_string)
messaging
gc <- fromJSON(paste(readLines(url(url_string)), collapse = ''))
gc
?fromJSON
?readLines
gc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
gc
gc <- xmlRoot(xmlTreeParse(gc, getDTD=F, useInternalNodes = T))
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
geocode
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- gsub(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Mannheim B2,1")
nominatim(place="Mannheim B 2,1")
nominatim(place="Trier Kohlenstraße")
nominatim(place="Trier Kohlenstraße 10")
nominatim(place="Trier Kohlenstrasse 10")
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- gsub(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
nominatim(place="Mannheim B2,1")
geocode()
geocode
?str_replace_all
url
?url
place <- "Mannheim B2,14"
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc
geocode_osm <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
?str_replace_all
?URLencode
?str_c
?url
?fromJSON
library(rjson)
require(XML)
library(stringr)
geocode_osm <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
nominatim(place="Mannheim B2,1")
geocode_osm(place="Mannheim B2,1")
geocode_osm <- function(place) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
geocode_osm(place="Mannheim B2,1")
