instance <- "http://overpass.osm.rambler.ru/"
place="Wiesloch"
instance <- "http://overpass.osm.rambler.ru/"
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
instance <- "http://overpass.osm.rambler.ru/cgi/"
rm(streets)
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
saveXML(streets_sf,file=paste(place,"_streets.xml",sep=""))
rm(streets)
place="Sinsheim"
instance <- "http://www.overpass-api.de/api/"
instance <- "http://overpass.osm.rambler.ru/cgi/"
streets <- xmlParse(paste(instance,"interpreter?data=area[name~\"",place,"\"];way(area)[highway][name];out;",sep=""))
streets <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way(area)[highway][name];out;",sep=""))
saveXML(streets_sf,file=paste(place,"_streets.xml",sep=""))
streets
info <- extract_info_op(streets,"highway")
infohead())
head(info)
saveXML(info,file=paste(place,"_info_streets.xml",sep=""))
save(info,file=paste(place,"_info_streets.RData",sep=""))
info$name
Str_namen <- as.character(info$name)
j<-1
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Str_namen[j],"\"];out;",sep=""))
paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Str_namen[j],"\"];out;",sep="")
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"",Klostergasse,"\"];out;",sep=""))
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"","Klostergasse","\"];out;",sep=""))
paste(instance,"interpreter?data=area[name=\"",place,"\"];node[addr:street=\"","Klostergasse","\"];out;",sep="")
library(SPARQL)
install.packages("SPARQL")
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=","Klostergasse","\"];out;",sep=""))
houses
place
Str_namen
houses <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=","Lauergasse","\"];out;",sep=""))
houses
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];node[\"addr:street=*\"];out;",sep=""))
streets2
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way[\"addr:street=*\"];out;",sep=""))
streets2
streets2 <- xmlParse(paste(instance,"interpreter?data=area[name=\"",place,"\"];way[\"addr:street\"];out;",sep=""))
head(osm_df)
get_osm_nodes
object2="*"
object <- paste("addr:street=",object2,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data=area[name=\""
type_obj <- "node"
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep="")
paste(Link1,place,"\"];",type_obj,"(area)[\"",object,\""];out;",sep="")
paste(Link1,place,"\"];",type_obj,"(area)[\"",object,"\"];out;",sep="")
xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[\"",object,"\"];out;",sep=""))
info <- xmlParse(query)
link <- "http://overpass-api.de/api/interpreter?data="
query <- paste(link,"(way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);>;);out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way(50.745,7.17,50.75,7.18);out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);>;out;",sep="")
info <- xmlParse(query)
info
query <- paste(link,"way[\"name\"=\"Gielgenstraße\"](50.7,7.1,50.8,7.25);out;",sep="")
info <- xmlParse(query)
info
nominatim <- function(location, output = c('latlon','latlona','more','all'),
messaging = FALSE) {
require(RCurl)
require(XML)
require(stringr)
require(plyr)
house <- FALSE
if (is.list(location)) {
house <- TRUE
house_number <- location[[1]]
# Extract first digits from house number
house_number_fdig <- str_extract(house_number, '^[0-9]*')
location <- str_c(house_number_fdig, location[[2]], sep = ',')
}
# Forming url
location <- str_replace_all(location, ' ', '+')
location <- URLencode(location)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', location)
# Geocode
if(messaging) message(str_c('contacting ', url_string, '...'), appendLF = F)
# gc <- getURL(url_string)
gc <- fromJSON(paste(readLines(url(url_string)), collapse = ''))
if(messaging) message(' done.')
return(gc)
# Extract place with required house number
gc <- xmlRoot(xmlTreeParse(gc, getDTD=F, useInternalNodes = T))
# return(xmlToList(gc))
if(house) {
gc <- getNodeSet(gc, str_c('//place[house_number/text() = "', house_number, '"]'))
if(output == 'all') return(xmlToList(gc[[1]]))
}
if(!house) {
return(xmlToList(gc))
}
#format geocoded data
return(gc)
}
nominatim("Mannheim Heumarkt 2")
library(rjson)
nominatim("Mannheim Heumarkt 2")
location="Mannheim Heumarkt 2"
library(ggmap)
geocode
location
house <- FALSE
is.list(location)
location <- str_replace_all(location, ' ', '+')
location <- URLencode(location)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', location)
url_string
info <- xmlParse(url_string)
messaging
gc <- fromJSON(paste(readLines(url(url_string)), collapse = ''))
gc
?fromJSON
?readLines
gc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
gc
gc <- xmlRoot(xmlTreeParse(gc, getDTD=F, useInternalNodes = T))
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
geocode
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- gsub(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Mannheim B2,1")
nominatim(place="Mannheim B 2,1")
nominatim(place="Trier Kohlenstraße")
nominatim(place="Trier Kohlenstraße 10")
nominatim(place="Trier Kohlenstrasse 10")
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- gsub(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
nominatim <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
geoc <- fromJSON(paste(readLines(url(url_string),warn=F), collapse = ''))
return(geoc)
}
nominatim(place="Rechweg 28 Sippersfeld")
nominatim(place="Mannheim B2,1")
geocode()
geocode
?str_replace_all
url
?url
place <- "Mannheim B2,14"
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc
geocode_osm <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
?str_replace_all
?URLencode
?str_c
?url
?fromJSON
library(rjson)
require(XML)
library(stringr)
geocode_osm <- function(place, output = c('latlon','latlona','more','all')) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
nominatim(place="Mannheim B2,1")
geocode_osm(place="Mannheim B2,1")
geocode_osm <- function(place) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
return(geoc)
}
geocode_osm(place="Mannheim B2,1")
geocode("Lifbi")
library(ggmap)
geocode("Lifbi")
geocode("Otto-Friedrich-Universität Bamberg")
geocode("Otto-Friedrich-Universitaet Bamberg")
?mapdist
mapdist("Mannheim","Bamberg",output="all")
mapdist("Mannheim","Bamberg",mode="bicycling")
library(geocodeHERE)
geocodeHERE_simple("Mannheim B2,1")
get_osm
library(osmar)
get_osm
get_osm_data
options(keep.source = T)
get_osm_data
osmar::get_osm_data
osmar:get_osm_data
osmar:::get_osm_data
getMethod("get_osm_data", "osmar")
getMethod("get_osm", "osmar")
getAnywhere("get_osm_data")
getClass(get_osm_data)
getClass("get_osm_data")
getGeneric("get_osm_data")
sum
?get_osm
?get_osm_data
get_osm
getAnywhere("get_osm_data")
?UseMethod
UseMethod("get_osm_data")
getClass("get_osm_data")
getGeneric("get_osm_data")
geocode
methods("get_osm_data")
getMethod("get_osm_data", "osmar")
getMethod("get_osm", "osmar")
get_osm
as_osmar
osmar_elemclass
osmar:::osmar_elemclass
osm_parse
osmar:::osm_parse
osmar:::element_parse
?getNodeSet
xml.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/data/XML"
setwd(xml.path)
xml <- xmlParse("ambulance_station_Berlin.xml")
element <- "node"
getNodeSet(xml, path = sprintf("//%s", element))
sprintf("//%s", element)
osmar:::element_parse
elem <- list()
obj <- xml
elem <- list()
elem$elements <- getNodeSet(obj, path = sprintf("//%s", element))
elem$IDs <- sapply(elem$elements, xmlGetAttr, "id")
subclass(elem, sprintf("%s_parsed", element))
?subclass
osmar::subclass
osmar:::subclass
?structure
elem$IDs
osmar:::osm_parse
get_osm
as_osmar
extract_data
osmar:::extract_data
library(geosmdata2)
?plotbui
plotbui
?as_sp
as_sp
library(sp)
osmar:::as_sp_lines()
as_sp_lines
osmar:::as_sp_lines
osmar:::Lines
?Lines
osmar:::ways_nodes2Line
geo
osmar:::geo
rm(list=ls())
library(foreign)
# block_vd2 quadrierte Distanzen für Einheiten aus verschiedenen PSUs  # geändert 11.12.2014
# y   -- nx1 Vektor
# PSU -- nx1 Vektor: Indentifikator für PSU
block_vd2 <- function(y,PSU){
d=0
for(i in 1:length(PSU)){
ym1 <- y[i]
ym2 <- y[PSU!=PSU[i]]
d   <- d+sum(outer(ym1,ym2,"-")^2)
}
return(d)
}
# block_mean(y,SP): Mittelwerte der y-Werte in den SamplePoints
block_mean <- function(y,SP){aggregate(y,by=list(SP),FUN="mean")}
# block_sih(y,PSU): Varianzen der y-Werte in den SamplePoints
block_sih <- function(y,SP){aggregate(y,by=list(SP),FUN="var")  }
#######################################
#         PSU       -- nx1  PSU-Kennung in Stichprobe
#         SSUi      -- mhx1 Vektor Stichprobe in ausgewählter PSU im i-ten Zug, i=1,..,n;
#         ss_list <- list(PSU,SSU1,...,SSUn)
#######################################
# sig_hat.R
# Input:  ys        -- sum(length(SSUi)) Stichprobenvektor der y-Werte
#         Mhs       -- nx1 Vektor Umfänge der ausgewählten PSUs
#         sslist    -- s. oben
#         N         -- Zahl der PSUs in Gesamtheit
#         K         -- Zahl aller SSUs in Gesamtheit
# Output: schaetzer -- Schätzer für Y_bar
#         v_hat     -- Varianzschätzer
#         sig_hat   -- Schätzer für sigma^2
#         S2        -- Stichprobenvarianz
sig_hat <- function(ys,Mhs,ss_list,N,K){
n     <- length(ss_list)-1  # Zahl der ausgewählten PSUs
s_PSU <- unlist(ss_list[[1]]) # i-te Stelle gibt gezogene PSU im i-ten Zug an, i=1,..,n
mhs      <- rep(0,n)         # Stichprobenumfänge in den ausgewählten PSUs
for(i in 1:n){ mhs[i] <- length(ss_list[[i+1]]) }
w        <- prod(Mhs/K)/prod(choose(Mhs,mhs)) # Gewicht für Stichproben
S2       <- var(ys)
PSU_v    <- rep(0, length(ys))  # geändert 11.12.2014
for(i in 1:n){  PSU_v[ss_list[[i+1]]] <- i } # Neunummerierung von 1,...,n
ybar_i  <- block_mean(ys,PSU_v)[,2]
sih2    <- block_sih(ys,PSU_v)[,2]
Hi      <- table(s_PSU)
Hi      <- Hi[as.character(s_PSU)]  # Hi gibt für jede ausgewählte PSU die Häufigkeit an, mit der sie in der Stichprobe vorkommt
e       <- sum(ybar_i)/n   # Schätzer für ty/K
v1      <- 1/(n*K)*sum( (Mhs-1)*sih2 )
v2      <- sum( (n-Hi)*( (mhs-1)/mhs*sih2) )/(n*(n-1))
v3      <- block_vd2(ybar_i,s_PSU)/(2*n*(n-1))
sig_hat <- v1+v2+v3 # Schätzer für sigma^2
v_hat   <- sum( (ybar_i - sum(ybar_i)/n)^2 )/(n*(n-1))  # Varianzschätzung des Schätzers für Y_bar
return(list(e,v_hat,sig_hat,S2,w))
}
######################################################
# Beispiel 1 im Paper
Mh      <- c(2,2)
y       <- 1:4
ss_list <- list(c(1,1),c(1,2),c(1,2))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
ss_list <- list(c(1,2),c(1,2),c(3,4))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
ss_list <- list(c(2,2),c(3,4),c(3,4))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
# Beispiel 2
########################
n  <- 2
N  <- 3
Mh <- c(4,6,5)
y <- 1:15
ss_list <- list(c(2,3),c(5,6,8,10),c(11,14))  # Beispiel 3 Nr 544
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 3
K       <- 15
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
# ALLBUS-Daten
########################
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
# path <- "D:/paper/2015/Howto/"
setwd(path)
dat_zus <- read.spss("zusatz_cs_siegfried_2010_neu.sav", use.value.labels = FALSE,to.data.frame = TRUE)
# v2  Numeric	8	2	Liste / Laufende	None	None
# ZPPLZ	Numeric	5	0	PLZ	None	None
# netto2010	Numeric	8	2		None	None
# Bevölkerungab18Stand31.12.2007	Numeric	11	0	Bevölkerung ab 18, Stand 31.12.2007	None	None
# AnzahlPointsinderStichprobe	Numeric	11	0	Anzahl Points in der Stichprobe	None	None
# Bevölkerungab18Stand31.12.2007  ANGEBLICH KEINE MISSINGS; in zusatz_cs_siegfried_2010.sav gibt aber 26 Missings in Gemeinde POING in Bayern
# keine Missings mehr in zusatz_cs_siegfried_2010_neu.sav
dat     <- read.spss("allb10_cs.sav", use.value.labels = FALSE,to.data.frame = TRUE)
# v2  Numeric	4	0	IDENTIFIKATIONSNUMMER DES BEFRAGTEN	None	None	8	Right	Scale	Input
# v4	Numeric	1	0	FRAGEBOGENSPLIT F020	{1, SPLIT 1}...	None	8	Right	Nominal	Input
# v5	Numeric	1	0	ERHEBUNGSGEBIET <WOHNGEBIET>: WEST - OST	{1, ALTE BUNDESLAENDER}...	None	8	Right	Nominal	Input
# v34	Numeric	1	0	GERECHTER ANTEIL A.LEBENSSTANDARD,BEFR.?	{1, SEHR VIEL WENIGER}...	7 - HI	8	Right	Nominal	Input
# v83	Numeric	1	0	ANZ. GENANNTER NETZWERKPERS. <SPLIT 1>	{0, KEINE PERSON}...	6 - HI	8	Right	Nominal	Input
# v301	Numeric	3	0	ALTER: BEFRAGTE<R>	{999, KEINE ANGABE}...	997 - HI	8	Right	Scale	Input
# v314	Numeric	2	0	BEFR.: STAATSBUERGERSCHAFT, 1. NENNUNG	{1, DEUTSCHLAND}...	97 - HI	8	Right	Nominal	Input
# v318	Numeric	2	0	AUSLAENDER: MEHR LEBENSSTILANPASSUNG	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v319	Numeric	2	0	AUSLAEND.:WIEDER HEIM BEI KNAPPER ARBEIT	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v320	Numeric	2	0	AUSLAENDER: POLIT.BETAETIGUNG UNTERSAGEN	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v321	Numeric	2	0	AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v327	Numeric	2	0	ALLGEMEINER SCHULABSCHLUSS	{1, OHNE ABSCHLUSS}...	97 - HI	8	Right	Nominal	Input
# v298	Numeric	1	0	GESCHLECHT, BEFRAGTE<R>	{1, MANN}...	None	8	Right	Nominal	Input
# v762	Numeric	3	0	<VIRTUELLE> POINT NUMMER	None	None	8	Right	Scale	Input
# v942	Numeric	6	0	INTERVIEWER<IN>-NUMMER	None	None	8	Right	Scale	Input
# v974	Numeric	2	0	BIK-REGIONEN	{1, BIS 1.999 EINWOHNER}...	None	8	Right	Nominal	Input
# v975	Numeric	3	0	BUNDESLAND, IN DEM BEFRAGTE<R> WOHNT	{10, SCHLESWIG-HOLSTEIN}...	None	8	Right	Scale	Input
# v976	Numeric	1	0	REGIERUNGSBEZIRK	{0, NICHT ENTHALTEN}...	None	8	Right	Nominal	Input
# v977	Numeric	11	9	PERSONENBEZOGENES OST-WEST-GEWICHT	{.594943761, NEUE BUNDESLAENDER}...	None	8	Right	Nominal	Input
# p_inklusion	Numeric	8	2		None	None	13	Right	Nominal	Input
# gewfake	Numeric	8	2		None	None	10	Right	Nominal	Input
# deutsch	Numeric	8	2		None	None	10	Right	Nominal	Input
# abitur	Numeric	8	2		None	None	10	Right	Nominal	Input
# regbez	Numeric	8	2		None	None	10	Right	Scale	Input
# bikbula	Numeric	8	2		None	None	10	Right	Scale	Input
# bikregbez	Numeric	8	2		None	None	11	Right	Scale	Input
# pointint	Numeric	8	2		None	None	10	Right	Scale	Input
x   <- merge(dat,dat_zus,by.x="v2",by.y="v2")  # Mergen der beiden Dateien nach v2
Mi  <- x[,ncol(x)-1]  # 26 NA
# Mi[is.na(Mi)] <- 10124  # Email Michael Blohm 11.12.2014
u   <- unique(Mi)
n   <- length(Mi)
PSU <- Mi
for(i in 1:n){
PSU <- replace(PSU,(1:n)[PSU==u[i]],i)
}
x   <- cbind(x,PSU)
Variable <- "abitur"   # Abitur
Variable <- "v301"     # Alter
Variable <- "v975"     # Bundesland
Variable <- "deutsch"  # 1=deutsch; 0 sonst
Variable <- "v318"     # AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7
Variable <- "v321"     # AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7
Variable <- "v327"     # ALLGEMEINER SCHULABSCHLUSS 1,...,7
nr       <- match(Variable,colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
# West
x_West    <- subset(x,x$v5==1)
PSU_West  <- unique(x_West$PSU)
SP_West   <- x_West$v762
uSP_West  <- unique(SP_West)
n_West    <- nrow(x_West) # Zahl der ausgewählten Personen im Datensatz
Mhi_West  <- subset(Mi,x$v5==1)
Mhs_West  <- Mi[match(uSP_West,SP_West)]
PSU_s     <- x_West$PSU[match(uSP_West,SP_West)]
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
ys_West   <- x_West[,nr]
ys_West   <- as.numeric(x_West[,nr]==6)
ss_list_West   <- list(PSU_s)
for(i in 1:length(uSP_West)){
ss_list_West[[i+1]] <- (1:nrow(x_West))[SP_West==uSP_West[i]]
}
erg_West <- sig_hat(ys_West,Mhs_West,ss_list_West,N_West,K_West)
cat(
paste(" Schätzer für mean       =",erg_West[[1]]),"\n",
paste("Varianzschätzer         =",erg_West[[2]]),"\n",
paste("Schätzer für sigma^2    =",erg_West[[3]]),"\n",
paste("Stichprobenvarianz      =",erg_West[[4]]),"\n",
paste("Schätzer für Deff       =",erg_West[[2]]/erg_West[[3]]*n_West),"\n",
paste("Schätzer für Deff(s^2)  =",erg_West[[2]]/erg_West[[4]]*n_West),"\n",
paste("Gewicht                 =",erg_West[[5]]),"\n"
)
Variable
nr
ys_West
mean(ys_West)
mean(x_West[,nr])
nrow(x_West)
nrow(x)
