osmar:::as_sp_lines()
as_sp_lines
osmar:::as_sp_lines
osmar:::Lines
?Lines
osmar:::ways_nodes2Line
geo
osmar:::geo
rm(list=ls())
library(foreign)
# block_vd2 quadrierte Distanzen für Einheiten aus verschiedenen PSUs  # geändert 11.12.2014
# y   -- nx1 Vektor
# PSU -- nx1 Vektor: Indentifikator für PSU
block_vd2 <- function(y,PSU){
d=0
for(i in 1:length(PSU)){
ym1 <- y[i]
ym2 <- y[PSU!=PSU[i]]
d   <- d+sum(outer(ym1,ym2,"-")^2)
}
return(d)
}
# block_mean(y,SP): Mittelwerte der y-Werte in den SamplePoints
block_mean <- function(y,SP){aggregate(y,by=list(SP),FUN="mean")}
# block_sih(y,PSU): Varianzen der y-Werte in den SamplePoints
block_sih <- function(y,SP){aggregate(y,by=list(SP),FUN="var")  }
#######################################
#         PSU       -- nx1  PSU-Kennung in Stichprobe
#         SSUi      -- mhx1 Vektor Stichprobe in ausgewählter PSU im i-ten Zug, i=1,..,n;
#         ss_list <- list(PSU,SSU1,...,SSUn)
#######################################
# sig_hat.R
# Input:  ys        -- sum(length(SSUi)) Stichprobenvektor der y-Werte
#         Mhs       -- nx1 Vektor Umfänge der ausgewählten PSUs
#         sslist    -- s. oben
#         N         -- Zahl der PSUs in Gesamtheit
#         K         -- Zahl aller SSUs in Gesamtheit
# Output: schaetzer -- Schätzer für Y_bar
#         v_hat     -- Varianzschätzer
#         sig_hat   -- Schätzer für sigma^2
#         S2        -- Stichprobenvarianz
sig_hat <- function(ys,Mhs,ss_list,N,K){
n     <- length(ss_list)-1  # Zahl der ausgewählten PSUs
s_PSU <- unlist(ss_list[[1]]) # i-te Stelle gibt gezogene PSU im i-ten Zug an, i=1,..,n
mhs      <- rep(0,n)         # Stichprobenumfänge in den ausgewählten PSUs
for(i in 1:n){ mhs[i] <- length(ss_list[[i+1]]) }
w        <- prod(Mhs/K)/prod(choose(Mhs,mhs)) # Gewicht für Stichproben
S2       <- var(ys)
PSU_v    <- rep(0, length(ys))  # geändert 11.12.2014
for(i in 1:n){  PSU_v[ss_list[[i+1]]] <- i } # Neunummerierung von 1,...,n
ybar_i  <- block_mean(ys,PSU_v)[,2]
sih2    <- block_sih(ys,PSU_v)[,2]
Hi      <- table(s_PSU)
Hi      <- Hi[as.character(s_PSU)]  # Hi gibt für jede ausgewählte PSU die Häufigkeit an, mit der sie in der Stichprobe vorkommt
e       <- sum(ybar_i)/n   # Schätzer für ty/K
v1      <- 1/(n*K)*sum( (Mhs-1)*sih2 )
v2      <- sum( (n-Hi)*( (mhs-1)/mhs*sih2) )/(n*(n-1))
v3      <- block_vd2(ybar_i,s_PSU)/(2*n*(n-1))
sig_hat <- v1+v2+v3 # Schätzer für sigma^2
v_hat   <- sum( (ybar_i - sum(ybar_i)/n)^2 )/(n*(n-1))  # Varianzschätzung des Schätzers für Y_bar
return(list(e,v_hat,sig_hat,S2,w))
}
######################################################
# Beispiel 1 im Paper
Mh      <- c(2,2)
y       <- 1:4
ss_list <- list(c(1,1),c(1,2),c(1,2))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
ss_list <- list(c(1,2),c(1,2),c(3,4))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
ss_list <- list(c(2,2),c(3,4),c(3,4))
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 2
K       <- 4
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
# Beispiel 2
########################
n  <- 2
N  <- 3
Mh <- c(4,6,5)
y <- 1:15
ss_list <- list(c(2,3),c(5,6,8,10),c(11,14))  # Beispiel 3 Nr 544
ys      <- y[c(ss_list[[2]],ss_list[[3]])]
Mhs     <- Mh[unlist(ss_list[[1]])]
N       <- 3
K       <- 15
erg <- sig_hat(ys,Mhs,ss_list,N,K)
cat(
paste(" Schätzer für mean    =",erg[[1]]),"\n",
paste("Varianzschätzer      =",erg[[2]]),"\n",
paste("Schätzer für sigma^2 =",erg[[3]]),"\n",
paste("Stichprobenvarianz   =",erg[[4]]),"\n",
paste("Gewicht              =",erg[[5]]),"\n")
########################
# ALLBUS-Daten
########################
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
# path <- "D:/paper/2015/Howto/"
setwd(path)
dat_zus <- read.spss("zusatz_cs_siegfried_2010_neu.sav", use.value.labels = FALSE,to.data.frame = TRUE)
# v2  Numeric	8	2	Liste / Laufende	None	None
# ZPPLZ	Numeric	5	0	PLZ	None	None
# netto2010	Numeric	8	2		None	None
# Bevölkerungab18Stand31.12.2007	Numeric	11	0	Bevölkerung ab 18, Stand 31.12.2007	None	None
# AnzahlPointsinderStichprobe	Numeric	11	0	Anzahl Points in der Stichprobe	None	None
# Bevölkerungab18Stand31.12.2007  ANGEBLICH KEINE MISSINGS; in zusatz_cs_siegfried_2010.sav gibt aber 26 Missings in Gemeinde POING in Bayern
# keine Missings mehr in zusatz_cs_siegfried_2010_neu.sav
dat     <- read.spss("allb10_cs.sav", use.value.labels = FALSE,to.data.frame = TRUE)
# v2  Numeric	4	0	IDENTIFIKATIONSNUMMER DES BEFRAGTEN	None	None	8	Right	Scale	Input
# v4	Numeric	1	0	FRAGEBOGENSPLIT F020	{1, SPLIT 1}...	None	8	Right	Nominal	Input
# v5	Numeric	1	0	ERHEBUNGSGEBIET <WOHNGEBIET>: WEST - OST	{1, ALTE BUNDESLAENDER}...	None	8	Right	Nominal	Input
# v34	Numeric	1	0	GERECHTER ANTEIL A.LEBENSSTANDARD,BEFR.?	{1, SEHR VIEL WENIGER}...	7 - HI	8	Right	Nominal	Input
# v83	Numeric	1	0	ANZ. GENANNTER NETZWERKPERS. <SPLIT 1>	{0, KEINE PERSON}...	6 - HI	8	Right	Nominal	Input
# v301	Numeric	3	0	ALTER: BEFRAGTE<R>	{999, KEINE ANGABE}...	997 - HI	8	Right	Scale	Input
# v314	Numeric	2	0	BEFR.: STAATSBUERGERSCHAFT, 1. NENNUNG	{1, DEUTSCHLAND}...	97 - HI	8	Right	Nominal	Input
# v318	Numeric	2	0	AUSLAENDER: MEHR LEBENSSTILANPASSUNG	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v319	Numeric	2	0	AUSLAEND.:WIEDER HEIM BEI KNAPPER ARBEIT	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v320	Numeric	2	0	AUSLAENDER: POLIT.BETAETIGUNG UNTERSAGEN	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v321	Numeric	2	0	AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN	{0, TRIFFT NICHT ZU}...	97 - HI, 0	8	Right	Nominal	Input
# v327	Numeric	2	0	ALLGEMEINER SCHULABSCHLUSS	{1, OHNE ABSCHLUSS}...	97 - HI	8	Right	Nominal	Input
# v298	Numeric	1	0	GESCHLECHT, BEFRAGTE<R>	{1, MANN}...	None	8	Right	Nominal	Input
# v762	Numeric	3	0	<VIRTUELLE> POINT NUMMER	None	None	8	Right	Scale	Input
# v942	Numeric	6	0	INTERVIEWER<IN>-NUMMER	None	None	8	Right	Scale	Input
# v974	Numeric	2	0	BIK-REGIONEN	{1, BIS 1.999 EINWOHNER}...	None	8	Right	Nominal	Input
# v975	Numeric	3	0	BUNDESLAND, IN DEM BEFRAGTE<R> WOHNT	{10, SCHLESWIG-HOLSTEIN}...	None	8	Right	Scale	Input
# v976	Numeric	1	0	REGIERUNGSBEZIRK	{0, NICHT ENTHALTEN}...	None	8	Right	Nominal	Input
# v977	Numeric	11	9	PERSONENBEZOGENES OST-WEST-GEWICHT	{.594943761, NEUE BUNDESLAENDER}...	None	8	Right	Nominal	Input
# p_inklusion	Numeric	8	2		None	None	13	Right	Nominal	Input
# gewfake	Numeric	8	2		None	None	10	Right	Nominal	Input
# deutsch	Numeric	8	2		None	None	10	Right	Nominal	Input
# abitur	Numeric	8	2		None	None	10	Right	Nominal	Input
# regbez	Numeric	8	2		None	None	10	Right	Scale	Input
# bikbula	Numeric	8	2		None	None	10	Right	Scale	Input
# bikregbez	Numeric	8	2		None	None	11	Right	Scale	Input
# pointint	Numeric	8	2		None	None	10	Right	Scale	Input
x   <- merge(dat,dat_zus,by.x="v2",by.y="v2")  # Mergen der beiden Dateien nach v2
Mi  <- x[,ncol(x)-1]  # 26 NA
# Mi[is.na(Mi)] <- 10124  # Email Michael Blohm 11.12.2014
u   <- unique(Mi)
n   <- length(Mi)
PSU <- Mi
for(i in 1:n){
PSU <- replace(PSU,(1:n)[PSU==u[i]],i)
}
x   <- cbind(x,PSU)
Variable <- "abitur"   # Abitur
Variable <- "v301"     # Alter
Variable <- "v975"     # Bundesland
Variable <- "deutsch"  # 1=deutsch; 0 sonst
Variable <- "v318"     # AUSLAENDER: MEHR LEBENSSTILANPASSUNG 0,...,7
Variable <- "v321"     # AUSLAENDER: SOLLTEN UNTER SICH HEIRATEN  0,...,7
Variable <- "v327"     # ALLGEMEINER SCHULABSCHLUSS 1,...,7
nr       <- match(Variable,colnames(x))
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
# West
x_West    <- subset(x,x$v5==1)
PSU_West  <- unique(x_West$PSU)
SP_West   <- x_West$v762
uSP_West  <- unique(SP_West)
n_West    <- nrow(x_West) # Zahl der ausgewählten Personen im Datensatz
Mhi_West  <- subset(Mi,x$v5==1)
Mhs_West  <- Mi[match(uSP_West,SP_West)]
PSU_s     <- x_West$PSU[match(uSP_West,SP_West)]
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
ys_West   <- x_West[,nr]
ys_West   <- as.numeric(x_West[,nr]==6)
ss_list_West   <- list(PSU_s)
for(i in 1:length(uSP_West)){
ss_list_West[[i+1]] <- (1:nrow(x_West))[SP_West==uSP_West[i]]
}
erg_West <- sig_hat(ys_West,Mhs_West,ss_list_West,N_West,K_West)
cat(
paste(" Schätzer für mean       =",erg_West[[1]]),"\n",
paste("Varianzschätzer         =",erg_West[[2]]),"\n",
paste("Schätzer für sigma^2    =",erg_West[[3]]),"\n",
paste("Stichprobenvarianz      =",erg_West[[4]]),"\n",
paste("Schätzer für Deff       =",erg_West[[2]]/erg_West[[3]]*n_West),"\n",
paste("Schätzer für Deff(s^2)  =",erg_West[[2]]/erg_West[[4]]*n_West),"\n",
paste("Gewicht                 =",erg_West[[5]]),"\n"
)
Variable
nr
ys_West
mean(ys_West)
mean(x_West[,nr])
nrow(x_West)
nrow(x)
place <- "Wha Ghana"
place <- str_replace_all(place, ' ', '+')
library(geosmdata2)
gc <- geocode_osm("Rheinauer See")
gc
gc
gc[1]
gc[2]
require(XML,rjson,stringr)
place="Rheinauer See"
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc
names(geoc)
names(geoc[[1]])
geoc <- data.frame(names(geoc[[1]]),geoc[[1]])
geoc
geoc[[1]]
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),geoc[[1]])
geoc[[1]]
str(geoc[[1]])
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
geoc1
geocode_osm <- function(place,all=F) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
if(all){return(geoc1)}else{return(c(geoc1$lat,geoc1$lon))}
}
gc <- geocode_osm(place="Rheinauer See")
gc
geocode_osm <- function(place,all=c(F,T)) {
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
if(all){return(geoc1)}else{return(c(geoc1$lat,geoc1$lon))}
}
gc <- geocode_osm(place="Rheinauer See")
geocode_osm <- function(place,all=c("coord","all")){
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
if(all=="all"){return(geoc1)}else{return(c(geoc1$lat,geoc1$lon))}
}
gc <- geocode_osm(place="Rheinauer See")
match.arg(output)
geocode_osm <- function(place,output=c("coord","all")){
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
if(output=="all"){return(geoc1)}else{return(c(geoc1$lat,geoc1$lon))}
}
gc <- geocode_osm(place="Rheinauer See")
gc
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- data.frame(names(geoc[[1]]),unlist(geoc[[1]]))
geoc1
geoc1 <- unlist(geoc[[1]])
geoc1
names(geoc1)
geoc1$lon
geoc1[which(names(geoc1)==lon)]
geoc1[which(names(geoc1)==lon)]
names(geoc1)==lon
names(geoc1)=="lon"
which(names(geoc1)=="lon")
geoc1[which(names(geoc1)=="lon")]
geoc2 <- c(geoc1[which(names(geoc1)=="lat")],geoc1[which(names(geoc1)=="lon")])
geoc2
geocode_osm <- function(place,output=c("coord","all")){
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- unlist(geoc[[1]])
geoc2 <- c(geoc1[which(names(geoc1)=="lat")],geoc1[which(names(geoc1)=="lon")])
if(output=="all"){return(geoc1)}else{return(geoc2)}
}
gc <- geocode_osm(place="Rheinauer See")
gc
geoc2 <- c(as.numeric(geoc1[which(names(geoc1)=="lat")]),as.numeric(geoc1[which(names(geoc1)=="lon")]))
geoc2
geocode_osm <- function(place,output=c("coord","all")){
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- unlist(geoc[[1]])
geoc2 <- c(as.numeric(geoc1[which(names(geoc1)=="lat")]),as.numeric(geoc1[which(names(geoc1)=="lon")]))
names(geoc2) <- c("lat","lon")
if(output=="all"){return(geoc1)}else{return(geoc2)}
}
gc <- geocode_osm(place="Rheinauer See")
gc
gc <- geocode_osm(place="Rheinauer See",output="all")
gc$lat
gc
geoc1
names(geoc2)
geoc1 <- unlist(geoc[[1]])
names(geoc1) <- names(geoc[[1]])
geoc1
names(geoc1)
geoc[[1]]
geocode_osm <- function(place,output=c("coord","all")){
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- geoc[[1]]
geoc2 <- c(as.numeric(geoc1[which(names(geoc1)=="lat")]),as.numeric(geoc1[which(names(geoc1)=="lon")]))
names(geoc2) <- c("lat","lon")
if(output=="all"){return(geoc[[1]])}else{return(geoc2)}
}
gc <- geocode_osm(place="Rheinauer See",output="all")
gc
gc$lat
gc[1]
gc[2]
gc
link <- "http://www.overpass-api.de/api/interpreter?data=node(around:10000,49.413,8.5337)["amenity"="cafe"];out;
link <- "http://www.overpass-api.de/api/interpreter?data=node(around:10000,49.413,8.5337)[\"amenity\"=\"cafe\"];out;
link <- "http://www.overpass-api.de/api/interpreter?data=node(around:10000,49.413,8.5337)[\"amenity\"=\"cafe\"];out;"
info <- xmlParse(link)
info
library(geosmdata2)
geocode_osm("cafe Mannheim")
geocode_osm("cafe Mannheim",output="all")
library(geosmdata2)
geocode_osm("cafe Mannheim",output="all")
expr <- paste("node(around:",radius,",",lat,",",lon,")[",object,"];out;",sep="")
gc <- geocode_osm(place="Rheinauer See",output="all")
gc
lon=gc$lon
lat=gc$lat
what="cafe"
ind <- which(what==osm_df$Value)
ind2 <- agrep("node",osm_df$Element[ind])
ind <- ind[ind2[1]]
object <- paste(osm_df$Key[ind],"=",what,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data="
expr <- paste("node(around:",radius,",",lat,",",lon,")[",object,"];out;",sep="")
radius=10000
expr <- paste("node(around:",radius,",",lat,",",lon,")[",object,"];out;",sep="")
InfoList <- xmlParse(paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep=""))
paste(Link1,place,"\"];",type_obj,"(area)[",object,"];out;",sep="")
InfoList <- xmlParse(paste(Link1,expr,sep=""))
InfoList
gc <- geocode_osm(place="Venice beach",output="all")
gc
cafes_venice <- CircSearch(what="cafe",lat=gc$lat,lon=gc$lon,radius=10000)
CircSearch <- function(what,lat,lon,radius){
ind <- which(what==osm_df$Value)
if(length(ind)>0){
ind2 <- agrep("node",osm_df$Element[ind])
if(length(ind2)>0){
ind <- ind[ind2[1]]
object <- paste(osm_df$Key[ind],"=",what,sep="")
Link1 <- "http://www.overpass-api.de/api/interpreter?data="
expr <- paste("node(around:",radius,",",lat,",",lon,")[",object,"];out;",sep="")
InfoList <- xmlParse(paste(Link1,expr,sep=""))
return(InfoList)
}
}
}
cafes_venice <- CircSearch(what="cafe",lat=gc$lat,lon=gc$lon,radius=10000)
cafes_venice
gc <- geocode_osm("Montmatre Paris",output="all")
gc <- geocode_osm("rue Saint Vincent Paris",output="all")
gc
gc <- geocode_osm("rue Saint Vincent Montmatre",output="all")
gc <- geocode_osm("rue Saint Vincent Montmatre Paris",output="all")
gc <- geocode_osm("rue Saint Vincent Montmartre Paris",output="all")
gc
gc <- geocode_osm("rue Saint Vincent Paris",output="all")
gc
gc_MA <- geocode_osm(place="Mannheim B2,1",output="all")
gc_MA
bus_stop_MA <- CircSearch(what="bus_stop",lat=gc$lat,lon=gc$lon,radius=5000)
bus_stop_MA
bus_stop_MA <- CircSearch(what="bus_stop",lat=gc_MA$lat,lon=gc_MA$lon,radius=5000)
bus_stop_MA
info_bus <- extract_info_op(OSM.Data=bus_stop_MA,value="bus_stop")
extract_info_op <- function(OSM.Data,value){
kov <- ifelse(value%in%osm_df$Value,"v","k")
if(kov=="v"){
ind <- which(value==osm_df$Value)
}else{
ind <- which(value==osm_df$Key)
}
Element <- osm_df$Element2[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element3[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element4[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element5[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
}
}
}
pb <- txtProgressBar(min = 0, max = length(node_id), style = 3)
lat_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lat",sep=""))
lon_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lon",sep=""))
Liste <- list()
if (length(node_id)>5000){cat("It can take some time!","\n")}
for (i in 1:length(node_id)){
Liste_i <- unlist(xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id[i],"]//tag/attribute::*",sep="")))
ind_k <- which(names(Liste_i)=="k")
ind_v <- which(names(Liste_i)=="v")
Liste[[i]] <- data.frame(k=Liste_i[ind_k],
v=Liste_i[ind_v],
id=rep(unlist(node_id[i]),length(ind_k))
)
# cat("Object", i, "from",length(node_id), "\n")
setTxtProgressBar(pb, i)
}
DF_x <- do.call(rbind,Liste)
DF_x1 <- data.frame(with(DF_x,tapply(v,list(id,k),function(x)as.character(x))))
if(length(lat_x)>0){
DF_x1$lat <- unlist(as.numeric(lat_x))
DF_x1$lon <- unlist(as.numeric(lon_x))
}
return(DF_x1)
}
info_bus <- extract_info_op(OSM.Data=bus_stop_MA,value="bus_stop")
library(geocodeHERE)
geocodeHERE_simple("Mannheim B2,1")
Sys.sleep
?Sys.sleep
Sys.sleep(1)
Sys.sleep(1)
geocode_osm <- function(place,output=c("coord","all")){
output <- match.arg(output)
place <- str_replace_all(place, ' ', '+')
place <- URLencode(place)
url_string <- str_c('http://nominatim.openstreetmap.org/search?format=json&addressdetails=1&q=', place)
con <- url(url_string)
geoc <- fromJSON(paste(readLines(con,warn=F), collapse = ''))
close(con)
geoc1 <- geoc[[1]]
geoc2 <- c(as.numeric(geoc1[which(names(geoc1)=="lat")]),as.numeric(geoc1[which(names(geoc1)=="lon")]))
names(geoc2) <- c("lat","lon")
if(output=="all"){return(geoc[[1]])}else{return(geoc2)}
Sys.sleep(1) # http://wiki.openstreetmap.org/wiki/Nominatim_usage_policy
# an absolute maximum of 1 request/s
}
