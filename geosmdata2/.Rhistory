ind <- which(value==osm_df$Value)
}else{
ind <- which(value==osm_df$Key)
}
Element <- osm_df$Element2[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element3[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element4[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element5[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
}
}
}
if(length(node_id)>0){
pb <- txtProgressBar(min = 0, max = length(node_id), style = 3)
lat_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lat",sep=""))
lon_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lon",sep=""))
Liste <- list()
if (length(node_id)>5000){cat("It can take some time!","\n")}
for (i in 1:length(node_id)){
Liste_i <- unlist(xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id[i],"]//tag/attribute::*",sep="")))
ind_k <- which(names(Liste_i)=="k")
ind_v <- which(names(Liste_i)=="v")
Liste[[i]] <- data.frame(k=Liste_i[ind_k],
v=Liste_i[ind_v],
id=rep(unlist(node_id[i]),length(ind_k))
)
# cat("Object", i, "from",length(node_id), "\n")
setTxtProgressBar(pb, i)
}
DF_x <- do.call(rbind,Liste)
DF_x1 <- data.frame(with(DF_x,tapply(v,list(id,k),function(x)as.character(x))))
if(length(lat_x)>0){
DF_x1$lat <- unlist(as.numeric(lat_x))
DF_x1$lon <- unlist(as.numeric(lon_x))
}
return(DF_x1)
}else{cat("No objects found","\n")}
}
schools <- get_osm_nodes(object2="school",place="Frankfurt")
info <- extract_info_op(OSM.Data=schools,value="school")
library(geosmdata2)
gc <- geocode_osm("rue Saint Vincent Paris",output="all")
gc
link <- "https://en.wikipedia.org/wiki/List_of_airports_in_Germany"
library(geosmdata2)
airports <- readHTMLTable(link)
?readHTMLTable
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
link <- htmlParse("https://en.wikipedia.org/wiki/List_of_airports_in_Germany")
link <- htmlParse("https://en.wikipedia.org/wiki/List_of_airports_in_Germany")
library(XML)
link <- htmlParse("https://en.wikipedia.org/wiki/List_of_airports_in_Germany")
link
library(RCurl)
fileURL <- "https://en.wikipedia.org/wiki/List_of_airports_in_Germany"
xData <- getURL(fileURL)
MA_cycle1 <- get_osm_ways(object2="cycleway",place="Mannheim")
library(geosmdata2)
MA_cycle1 <- get_osm_ways(object2="cycleway",place="Mannheim")
MA_bike_routes <- extract_position_op(MA_cycle1,"cycleway")
MA_bike_routes
library(ggmap)
MAmap <- get_googlemap("Mannheim")
cafes <- get_osm_nodes("cafe",place="Aalborg")
cafes_aa <- extract_info_op(OSM.Data=cafes,value="cafe")
cafes
extract_info_op <- function(OSM.Data,value){
kov <- ifelse(value%in%osm_df$Value,"v","k")
if(kov=="v"){
ind <- which(value==osm_df$Value)
}else{
ind <- which(value==osm_df$Key)
}
Element <- osm_df$Element2[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element3[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element4[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
if (length(node_id)==0){
Element <- osm_df$Element5[ind]
node_id<- xpathApply(OSM.Data,paste("//tag[@",kov,"= '",value,"']/parent::",Element,"/@ id",sep="") )
}
}
}
if(length(node_id)>0){
pb <- txtProgressBar(min = 0, max = length(node_id), style = 3)
lat_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lat",sep=""))
lon_x <- xpathApply(OSM.Data,paste("//tag[@",kov," = '",value,"']/parent::",Element,"/@ lon",sep=""))
Liste <- list()
if (length(node_id)>5000){cat("It can take some time!","\n")}
for (i in 1:length(node_id)){
Liste_i <- unlist(xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id[i],"]//tag/attribute::*",sep="")))
ind_k <- which(names(Liste_i)=="k")
ind_v <- which(names(Liste_i)=="v")
Liste[[i]] <- data.frame(k=Liste_i[ind_k],
v=Liste_i[ind_v],
id=rep(unlist(node_id[i]),length(ind_k))
)
# cat("Object", i, "from",length(node_id), "\n")
setTxtProgressBar(pb, i)
}
DF_x <- do.call(rbind,Liste)
DF_x1 <- data.frame(with(DF_x,tapply(v,list(id,k),function(x)as.character(x))))
if(length(lat_x)>0){
DF_x1$lat <- unlist(as.numeric(lat_x))
DF_x1$lon <- unlist(as.numeric(lon_x))
}
return(DF_x1)
}else{cat("No objects found","\n")}
}
cafes_aa <- extract_info_op(OSM.Data=cafes,value="cafe")
cafes <- get_osm_nodes("cafe",place="Concord")
cafes_cc <- extract_info_op(OSM.Data=cafes,value="cafe")
Concord_map <- get_googlemap("Concord")
Concord_map + geom_point(aes(x = lon, y = lat),
data = cafes_cc)
cafes_cc
Concord_map
ggmap(Concord_map)
ggmap(Concord_map)+ geom_point(aes(x = lon, y = lat),
data = cafes_cc)
data(wrld_simpl)
library(maptools)
data(wrld_simpl)
library(knitr)
data(wrld_simpl)
wrld_simpl@data
kable(head(wrld_simpl))
head(wrld_simpl)
kable(head(wrld_simpl@data))
map()
map("france")
kable(head(world.cities))
head(world.cities)
data(world.cities)
kable(head(world.cities))
rm(list=ls())
author <- "Siegfried Gabler, Jan-Philipp Kolb"
scriptname <- "WeightALL_D_SurveyPackage.R"
library(survey)
library(foreign)
#---------------------------------------#
# Paths
#---------------------------------------#
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
r.path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/Rcode/rcodePaper"
#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
x_ALL <- x
load("ALLBUS10Vars.RData")
#---------------------------------------#
# Read functions
#---------------------------------------#
setwd(r.path)
source("WeightALL_B_functions.R")
#---------------------------------------#
# Choose variables for analysis
#---------------------------------------#
Descr <- Vars[-c(1:3),3]
Variablen <- as.character(Vars[-c(1:3),1])
nVars <- c("p_inklusion","gewfake","pointint","bikregbez","bikbula","regbez","v942","v762","v977","deutsch","v976")
Nind <- match(nVars,Variablen)
Variablen <- Variablen[-Nind]
j<- 1
nr       <- match(Variablen[j],colnames(x))
x <- x_ALL
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
#---------------------------------------#
# Compute mean etc for western Germany
#---------------------------------------#
# West
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
# Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
tab_lev <- table(x_West[,nr])
erg_West <- data.frame(Variable=Variablen[j],
Level=names(tab_lev),
Estimator.mean=NA,
Variance.estimator=NA,
Estimator.for.sigma.2=NA,
Sampling.variance=NA,
mean_survey=NA,
variance_survey=NA,
DEff_survey=NA
)
i <-1
x_West$ID <- 1:nrow(x_West)
tab_v762 <- table(x_West$v762)
x_West$prob1 <- (x_West$Mi/K_West)*length(tab_v762)
ind <- match(x_West$v762,names(tab_v762))
x_West$prob2 <- tab_v762[ind]/x_West$Mi
x_West$weight <- 1/(x_West$prob1*x_West$prob2)
ys_West   <- as.numeric(x_West[,nr]==names(tab_lev)[i])
eval(parse(text=paste("x_West$ys_",names(tab_lev)[i],"<- ys_West",sep="")))
n_West   <- nrow(x_West)
dclus_ALLB <-svydesign(id=~v762+ID,prob=~prob1+prob2,data=x_West)
erg_West[i,3:6] <-  sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N=N_West,
K=K_West)
erg_survey <- svymean(~ys_West, dclus_ALLB, deff=TRUE)
erg_West[i,"mean_survey"] <- erg_survey
erg_West[i,"variance_survey"] <- SE(erg_survey)^2
erg_West[i,"DEff_survey"] <- deff(erg_survey)
gc()
library(geosmdata2)
library(geosmdata2)
xml_obj <- get_osm_nodes("bakery","Mannheim")
setwd(data.path)
library(XML)
library(geosmdata2)
library(ggmap)
main.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/"
data.path <- paste(main.path,"data/XML/",sep="")
graph.path <- paste(main.path,"figure/",sep="")
setwd(data.path)
library(XML)
setwd(data.path)
saveXML(xml_obj,file=paste(place,"_",obj,".xml"))
place <- "Mannheim"
obj <- "bakery"
setwd(data.path)
saveXML(xml_obj,file=paste(place,"_",obj,".xml"))
saveXML(xml_obj,file=paste(place,"_",obj,".xml",sep=""))
xml_obj
rm(list=ls())
author <- "Siegfried Gabler, Jan-Philipp Kolb"
scriptname <- "WeightALL_D_SurveyPackage.R"
#---------------------------------------#
# libraries
#---------------------------------------#
library(survey)
library(foreign)
#---------------------------------------#
# Paths
#---------------------------------------#
path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/data"
r.path <- "J:/Work/Statistik/Kolb/Paper/Gewichtung/Rcode/rcodePaper"
#---------------------------------------#
# Read data
#---------------------------------------#
setwd(path)
load("ALLBUSweights.RData")
x_ALL <- x
load("ALLBUS10Vars.RData")
setwd(r.path)
source("WeightALL_B_functions.R")
Descr <- Vars[-c(1:3),3]
Variablen <- as.character(Vars[-c(1:3),1])
nVars <- c("p_inklusion","gewfake","pointint","bikregbez","bikbula","regbez","v942","v762","v977","deutsch","v976")
Nind <- match(nVars,Variablen)
Variablen <- Variablen[-Nind]
ErgList <-list()
j<-1
nr       <- match(Variablen[j],colnames(x))
x <- x_ALL
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
# Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
tab_lev <- table(x_West[,nr])
erg_West <- data.frame(Variable=Variablen[j],
Level=names(tab_lev),
Estimator.mean=NA,
Variance.estimator=NA,
Estimator.for.sigma.2=NA,
Sampling.variance=NA,
mean_survey=NA,
variance_survey=NA,
DEff_survey=NA
)
x_West$ID <- 1:nrow(x_West)
tab_v762 <- table(x_West$v762)
x_West$prob1 <- (x_West$Mi/K_West)*length(tab_v762)
ind <- match(x_West$v762,names(tab_v762))
x_West$prob2 <- tab_v762[ind]/x_West$Mi
x_West$weight <- 1/(x_West$prob1*x_West$prob2)
i<-1
ys_West   <- as.numeric(x_West[,nr]==names(tab_lev)[i])
eval(parse(text=paste("x_West$ys_",names(tab_lev)[i],"<- ys_West",sep="")))
n_West   <- nrow(x_West)
dclus_ALLB <-svydesign(id=~v762+ID,prob=~prob1+prob2,data=x_West)
erg_West[i,3:6] <-  sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N=N_West,
K=K_West)
erg_survey <- svymean(~ys_West, dclus_ALLB, deff=TRUE)
erg_West[i,"mean_survey"] <- erg_survey
erg_West[i,"variance_survey"] <- SE(erg_survey)^2
erg_West[i,"DEff_survey"] <- deff(erg_survey)
head(x_West)
i
erg_West
Variablen[j]
j
Variablen
j<-12
nr       <- match(Variablen[j],colnames(x))
x <- x_ALL
x        <- subset(x,is.na(x[,nr])==0)  # Zeilen mit missings in Variable werden gelöscht
Variablen[j]
N_West    <- 8497      # Zahl der Gemeinden (PSUs); aus GEM2007.sav + Berlin-West
K_West    <- 55701259  # Zahl der 18+ Einwohner (SSUs); aus 6706109495_Allokationsprotokoll.txt
# Mh_West   <- 111       # Zahl der Sample Points; aus 6706109495_Allokationsprotokoll.txt
x_West    <- subset(x,x$v5==1)
tab_lev <- table(x_West[,nr])
erg_West <- data.frame(Variable=Variablen[j],
Level=names(tab_lev),
Estimator.mean=NA,
Variance.estimator=NA,
Estimator.for.sigma.2=NA,
Sampling.variance=NA,
mean_survey=NA,
variance_survey=NA,
DEff_survey=NA
)
x_West$ID <- 1:nrow(x_West)
tab_v762 <- table(x_West$v762)
x_West$prob1 <- (x_West$Mi/K_West)*length(tab_v762)
ind <- match(x_West$v762,names(tab_v762))
x_West$prob2 <- tab_v762[ind]/x_West$Mi
x_West$weight <- 1/(x_West$prob1*x_West$prob2)
i<-1
ys_West   <- as.numeric(x_West[,nr]==names(tab_lev)[i])
eval(parse(text=paste("x_West$ys_",names(tab_lev)[i],"<- ys_West",sep="")))
n_West   <- nrow(x_West)
dclus_ALLB <-svydesign(id=~v762+ID,prob=~prob1+prob2,data=x_West)
erg_West[i,3:6] <-  sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N=N_West,
K=K_West)
erg_West
mean(ys)
mean(ys_West)
.016^2
var(ys_West)
for (i in 1:length(tab_lev)){
ys_West   <- as.numeric(x_West[,nr]==names(tab_lev)[i])
eval(parse(text=paste("x_West$ys_",names(tab_lev)[i],"<- ys_West",sep="")))
n_West   <- nrow(x_West)
dclus_ALLB <-svydesign(id=~v762+ID,prob=~prob1+prob2,data=x_West)
erg_West[i,3:6] <-  sig_hat(ys=ys_West,
Mi=x_West$Mi,
PSU=x_West$PSU,
sPSU=x_West$v762,
N=N_West,
K=K_West)
erg_survey <- svymean(~ys_West, dclus_ALLB, deff=TRUE)
erg_West[i,"mean_survey"] <- erg_survey
erg_West[i,"variance_survey"] <- SE(erg_survey)^2
erg_West[i,"DEff_survey"] <- deff(erg_survey)
}
setwd(data.path)
data.path <- "J:/Work/Statistik/Kolb/Beratung/Testverfahren/data"
setwd(data.path)
library(foreign)
dat <- read.spss("Schatz an der Küste_20152005.sav")
head(Dat)
head(dat)
dat <- read.spss("Schatz an der Küste_20152005.sav",to.data.frame=T)
save(dat,file="Kuestenschatz.RData")
load("Kuestenschatz.RData")
head(dat)
table(Dat$S)
table(dat$S)
table(dat$S1)
table(dat$S2A1)
barplot(table(dat$S2A1))
hist(dat$endwich)
plot(dat$endwich,dat$S2A1)
barplot(table(dat$S2A1))
tapply(dat$endwich,dat$S2A1,sum,na.rm=T)
barplot(tapply(dat$endwich,dat$S2A1,sum,na.rm=T))
table(table(dat$S1))
table(dat$S2A1_Altersgruppen)
library(XML)
library(geosmdata2)
library(ggmap)
main.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/"
data.path <- paste(main.path,"data/XML/",sep="")
graph.path <- paste(main.path,"figure/",sep="")
place <- "Mannheim"
obj <- "bakery"
xml1 <- xmlParse(paste(place,"_",obj,".xml",sep=""))
dir()
setwd(data.path)
xml1 <- xmlParse(paste(place,"_",obj,".xml",sep=""))
Imap <- qmap(location = place, zoom = 14, maptype="toner",source="stamen")
?geom_bin2d
info <- extract_info_op(xml1,obj)
Imap + geom_density2d(data = info, aes(x = lon, y = lat))
Imap <- qmap(location = place, zoom = 12, maptype="toner",source="stamen")
Imap + geom_density2d(data = info, aes(x = lon, y = lat))
Imap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=3)
Imap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=2)
Imap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=1.5)
setwd(graph.path)
png(paste("geom_density2d_",place,"_",obj,".png",sep=""))
Imap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=1.5)
dev.off()
Imap + stat_density2d(data = W, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = 'polygon')
png(paste("geom_density2d_",place,"_",obj,"2.png",sep=""))
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = 'polygon')
dev.off()
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..),
size = 0.01, bins = 16, geom = 'polygon')
png(paste("geom_density2d_",place,"_",obj,"3.png",sep=""))
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..),
size = 0.01, bins = 16, geom = 'polygon')
dev.off()
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.05, bins = 16, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.5, bins = 16, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.5, bins = 40, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.5, bins = 100, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 100, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 500, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 50, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 3, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 20, geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 80, geom = 'polygon')
Imap +
geom_density2d(data = info, aes(x = lon, y = lat)) +
stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = 'polygon') +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.00, 0.25), guide = FALSE) +
theme(legend.position = "none", axis.title = element_blank(), text = element_text(size = 12))
place <- "Berlin"
obj <- "bakery"
xml_obj <- get_osm_nodes("bakery","Berlin")
setwd(data.path)
saveXML(xml_obj,file=paste(place,"_",obj,".xml",sep=""))
info <- extract_info_op(xml_obj,"bakery")
Imap <- qmap(location = place, zoom = 14, maptype="toner",source="stamen")
Imap
Imap <- qmap(location = place, zoom = 10, maptype="toner",source="stamen")
Imap
Imap + geom_density2d(data = info, aes(x = lon, y = lat),lwd=1.5)
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..)
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..))
nrow(info)
head(info)
Imap <- qmap(location = "Berlin", zoom = 11, maptype="toner",source="stamen")
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..))
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..), bins = 80,
geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..), bins = 100,
geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..), bins = 1000,
geom = 'polygon')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..), bins = 80,
geom = 'polygon')
stat_density2d
?stat_density2d
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 16, geom = 'density2d')
Imap + stat_density2d(data = info, aes(x = lon, y = lat,  fill = ..level..,
alpha = ..level..),
size = 0.01, bins = 16, geom = 'title')
